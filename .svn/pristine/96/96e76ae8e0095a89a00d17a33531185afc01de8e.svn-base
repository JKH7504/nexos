package nexos.framework.config;

import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.mchange.v2.c3p0.ComboPooledDataSource;

// ===================================================================================================================================================
// XML 원본 설정 - context-database.xml
// ===================================================================================================================================================
// <?xml version="1.0" encoding="UTF-8"?>
// <!--
// ==================================================================================================================================================
// Spring Root Context 설정 [데이터소스 설정]
// Author : ASETEC
// Date : 2012-10-25
// Description
// Root Context 중에서 데이터소스 설정 부분
// ==================================================================================================================================================
// -->
// <beans xmlns="http://www.springframework.org/schema/beans" xmlns:tx="http://www.springframework.org/schema/tx"
// xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
// xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
// http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
// <!--
// ==============================================================================================================================================
// Connection Pool & DataSource 관련
// depends-on="commonProps
// ==============================================================================================================================================
// -->
// <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
// <!--
// ==========================================================================================================================================
// < Properties >
// driverClass _____________________ : JDBC Dirver Class
// jdbcUrl _________________________ : JDBC Url
// user ____________________________ : DB 접속 사용자
// password ________________________ : DB 접속 사용자 패스워드
//
// initialPoolSize _________________ : 최초 Pool Size, min/max Pool Size 사이의 값 지정[기본값: 3]
// minPoolSize _____________________ : 최소 유지 Pool Size[기본값: 3]
// maxPoolSize _____________________ : 최대 Pool Size[기본값: 15]
// acquireIncrement ________________ : Pool에 Connection 없을때 생성할 Connection 수[기본값: 3]
// acquireRetryAttempts ____________ : Connection 생성 시도할 횟수[기본값: 30]
// acquireRetryDelay _______________ : Connection 생성 재시도 지연시간[밀리초단위][기본값: 1000]
//
// maxIdleTime _____________________ : 지정시간 동안 유휴 상태로 있으면 Pool에서 Connection 제거[초단위][기본값: 0, 0일 경우 계속 유지]
// maxIdleTimeExcessConnections ____ : minPoolSize를 초과하는 Connection이 제거되기 전에 Pool에 유휴 상태를 유지해야하는 시간[초단위][기본값: 0, 0일 경우 초과 연결이 유휴상태가 아님]
//
// numHelperThreads ________________ : Helper Thread 수[기본값: 3]
// unreturnedConnectionTimeout _____ : Connection을 사용 후 Pool로 Return 되지 않을 경우 Connection을 강제로 Close 하는 시간[초단위][기본값: 0, 0일 경우 유지]
//
// idleConnectionTestPeriod ________ : Pool에 유휴 상태로 존재하는 Connection의 테스트 시간[초단위][기본값: 0, 0일 경우 테스트 하지 않음]
// preferredTestQuery ______________ : 연결 테스트를 위한 쿼리
// testConnectionOnCheckin _________ : 체크인시 Connection의 유효성 검증 여부[기본값: false]
// testConnectionOnCheckout ________ : 체크아웃시 Connection의 유효성 검증 여부[기본값: false]
//
// connectionCustomizerClassName ___ : 접속/접속해제/체크인/체크아웃에 대해 Connection에 대한 커스터마이징 처리할 경우 해당 클래스 지정
// ==========================================================================================================================================
// -->
// <property name="driverClass" value="#{commonProps['DB.DRIVER_CLASS_NAME']}" />
// <property name="jdbcUrl" value="#{commonProps['DB.JDBC_URL']}" />
// <property name="user" value="#{commonProps['DB.USER_ID']}" />
// <property name="password" value="#{commonProps['DB.USER_PWD']}" />
// <property name="initialPoolSize" value="5" />
// <property name="minPoolSize" value="5" />
// <property name="maxPoolSize" value="100" />
// <property name="acquireIncrement" value="5" />
// <property name="acquireRetryAttempts" value="5" />
// <property name="acquireRetryDelay" value="1000" /> <!-- 1초 -->
// <property name="maxIdleTime" value="3600" /> <!-- 60분 -->
// <property name="maxIdleTimeExcessConnections" value="60" /> <!-- 1분 -->
// <property name="numHelperThreads" value="5" />
// <!-- mybatis의 defaultStatementTimeout보다 크게 세팅 필요 -->
// <property name="unreturnedConnectionTimeout" value="3900" /> <!-- 65분 -->
// <!-- <property name="debugUnreturnedConnectionStackTraces" value="true" /> -->
// <property name="idleConnectionTestPeriod" value="300" /> <!-- 5분 -->
// <property name="preferredTestQuery" value="#{commonProps['DB.TEST_QUERY_TEXT']}" />
// <property name="testConnectionOnCheckin" value="true" />
// <property name="testConnectionOnCheckout" value="false" />
// <property name="connectionCustomizerClassName" value="nexos.framework.db.c3p0.ConnectionCustomizer" />
// </bean>
//
// <!--
// ==============================================================================================================================================
// myBatis 관련 - ID 변경 불가
// depends-on="commonProps,dataSource"
// ==============================================================================================================================================
// -->
// <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
// <property name="dataSource" ref="dataSource" />
// <property name="configLocation" value="classpath:/nexos/config/config-mybatis.xml" />
// <!-- mapperLocations를 변경할 경우 WCDAO.reloadSqlMap Method도 수정 필요 -->
// <property name="mapperLocations" value="classpath:/nexos/sqlmap/#{commonProps['DB.TYPE']}/**/*_sqlmap.xml" />
// </bean>
//
// <!--
// ==============================================================================================================================================
// Transaction 관련 - ID 변경 불가
// Transaction Manager 등록
// depends-on="dataSource"
// ==============================================================================================================================================
// -->
// <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
// <property name="dataSource" ref="dataSource" />
// </bean>
//
// <!--
// ==============================================================================================================================================
// Transaction을 애노테이션으로 관리하기 위한 선언
// ==============================================================================================================================================
// -->
// <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
//
// </beans>
@Configuration
@EnableTransactionManagement(proxyTargetClass = true)
public class DatabaseConfig {

    @Autowired
    private GlobalProperties globalProps;

    @Bean(destroyMethod = "close")
    public ComboPooledDataSource dataSource() throws Exception {

        ComboPooledDataSource result = new ComboPooledDataSource();
        result.setDriverClass(globalProps.getProperty("DB.DRIVER_CLASS_NAME"));
        result.setJdbcUrl(globalProps.getProperty("DB.JDBC_URL"));
        result.setUser(globalProps.getProperty("DB.USER_ID"));
        result.setPassword(globalProps.getProperty("DB.USER_PWD"));
        int initialPoolSize = Integer.valueOf(globalProps.getProperty("DB.INITIAL_POOL_SIZE", "5"));
        result.setInitialPoolSize(initialPoolSize);
        result.setMinPoolSize(initialPoolSize);
        result.setMaxPoolSize(100);
        result.setAcquireIncrement(5);
        result.setAcquireRetryAttempts(5);
        result.setAcquireRetryDelay(1000); // 1초, ms
        result.setMaxIdleTime(3600); // 60분, s
        result.setMaxIdleTimeExcessConnections(60);
        result.setNumHelperThreads(5);
        result.setUnreturnedConnectionTimeout(3900); // 65분, s
        result.setCheckoutTimeout(30000); // 30초, ms
        result.setIdleConnectionTestPeriod(300); // 5분, s
        result.setPreferredTestQuery(globalProps.getProperty("DB.TEST_QUERY_TEXT"));
        result.setTestConnectionOnCheckin(false); // 사용 후 Pool에 반환될 때
        result.setTestConnectionOnCheckout(true); // 사용 전 Pool에서 가져올 때
        result.setConnectionCustomizerClassName("nexos.framework.db.c3p0.ConnectionCustomizer");

        return result;
    }

    @Bean
    public SqlSessionFactoryBean sqlSessionFactory() throws Exception {

        SqlSessionFactoryBean factory = new SqlSessionFactoryBean();
        factory.setDataSource(dataSource());
        factory.setConfigLocation(new ClassPathResource("/nexos/config/config-mybatis.xml"));
        factory.setMapperLocations(new PathMatchingResourcePatternResolver() //
            .getResources("classpath:/nexos/sqlmap/" + globalProps.getProperty("DB.TYPE") + "/**/*_sqlmap.xml"));

        return factory;
    }

    @Bean
    public PlatformTransactionManager txManager() throws Exception {

        return new DataSourceTransactionManager(dataSource());
    }
}
