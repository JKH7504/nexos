package nexos.service.ed.common;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;

import nexos.dao.ed.common.EDCommonDAO;
import nexos.framework.Consts;
import nexos.framework.Util;
import nexos.framework.db.dynamic.DynamicDataSource;
import nexos.framework.message.NexosMessage;
import nexos.framework.security.AuthenticationUtil;
import nexos.framework.support.ServiceSupport;

/**
 * Class: EDExternalDBService<br>
 * Description: WMS External Database 서비스를 담당하는 Class(트랜잭션처리 담당)<br>
 * Copyright: Copyright (c) 2013 ASETEC Corporation. All rights reserved.<br>
 * Company : ASETEC<br>
 * 
 * @author ASETEC
 * @version 1.0
 *          <pre style="font-family: GulimChe; font-size: 12px;">
 * ---------------------------------------------------------------------------------------------------------------------
 *  Version    Date          Author           Description
 * ---------  ------------  ---------------  ---------------------------------------------------------------------------
 *  1.0        2013-01-01    ASETEC           신규작성
 * ---------------------------------------------------------------------------------------------------------------------
 *          </pre>
 */
@Service
public class EDExternalDBService extends ServiceSupport {

    // private final Logger logger = LoggerFactory.getLogger(EDExternalDBService.class);

    final String        SELECT_ID_HANJIN_ADDRESS_INFO = "WI.GET_HANJIN_ADDRESS_INFO";
    final String        UPDATE_ID_HANJIN_ADDRESS_INFO = "WI.SET_HANJIN_ADDRESS_INFO_UPDATE";

    @SuppressWarnings("unused")
    @Autowired
    private EDCommonDAO dao;

    /**
     * 데이터의 키/값을 서비스 호출 데이터 키/값으로 변경 처리
     * 
     * @param rowData
     *        변경 처리할 데이터 맵
     * @param callParams
     *        결과반영 호출 파라메터 맵
     */
    private void setParameter(Map<String, Object> rowData, Map<String, Object> callParams) {

        callParams.clear();
        for (Map.Entry<String, Object> entry : rowData.entrySet()) {
            String key = entry.getKey();
            // 결과반영 호출 기본 파라메터
            if (key.startsWith("P_")) {
                callParams.put(key, entry.getValue());
            }
        }
    }

    /**
     * [한진택배] 주소정제 웹서비스 호출<br>
     * 별도 쓰레드로 동작 함
     * 
     * @param params
     *        <br>
     *        P_CHECKED_VALUE: 출고정보<br>
     *        P_USER_ID: 사용자ID<br>
     *        P_THREAD_YN: 쓰레드로 동작할지 여부
     * @return
     */
    public void callHanjinGetAddressInformation(final Map<String, Object> params) {

        List<Map<String, Object>> dsAddress = null;
        TransactionStatus ts = beginTrans();
        try {
            getDefaultDao().insertCheckedValue(params);
            dsAddress = getDataList(SELECT_ID_HANJIN_ADDRESS_INFO, params);
        } finally {
            rollbackTrans(ts);
        }
        if (dsAddress == null || dsAddress.size() == 0) {
            return;
        }

        // 쓰레드 동작, 기본값 N
        if (!params.containsKey("P_THREAD_YN")) {
            params.put("P_THREAD_YN", Consts.NO);
        }
        String threadYn = (String)params.get("P_THREAD_YN");
        if (Consts.YES.equals(threadYn)) {
            final List<Map<String, Object>> dsThreadAddress = dsAddress;
            new Thread(new Runnable() {

                @Override
                public void run() {
                    AuthenticationUtil.configureAuthentication();
                    try {
                        callHanjinGetAddressInformation(params, dsThreadAddress);
                    } catch (Exception e) {
                    } finally {
                        AuthenticationUtil.clearAuthentication();
                    }
                }
            }).start();
        } else {
            callHanjinGetAddressInformation(params, dsAddress);
        }
    }

    private void callHanjinGetAddressInformation(Map<String, Object> params, List<Map<String, Object>> dsAddress) {

        // External DB 호출 기본 정보 처리
        Map<String, Object> defineInfo = dsAddress.get(0);
        // 호출 기본 정보 - 컬럼명 SP_로 시작, 입력시 P_로 변경하여 입력
        Map<String, Object> serviceParams = new HashMap<String, Object>();
        for (Map.Entry<String, Object> entry : defineInfo.entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("SP_")) {
                serviceParams.put(key.replaceFirst("SP_", "P_"), entry.getValue());
            }
        }
        // 호출 결과 파라메터 매핑 정보 파싱
        Map<String, Object> resultToParams = Util.toKeyValues((String)serviceParams.get("P_RESULT_TO_PARAM_MAP"));
        if (resultToParams.size() == 0) {
            throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.030", "[P_RESULT_TO_PARAM_MAP]파라메터 매핑 정보가 존재하지 않습니다."));
        }

        String remoteDiv = (String)serviceParams.get("P_REMOTE_DIV");
        String remoteIp = (String)serviceParams.get("P_REMOTE_IP");
        String remotePort = (String)serviceParams.get("P_REMOTE_PORT");
        String remoteUserId = (String)serviceParams.get("P_REMOTE_USER_ID");
        String remoteUserPwd = (String)serviceParams.get("P_REMOTE_USER_PWD");
        String remoteDbNm = (String)serviceParams.get("P_LINK_DB_NM");
        String remoteTableNm = (String)serviceParams.get("P_LINK_TABLE_NM");

        if (remoteDiv == null || remoteIp == null || remotePort == null || remoteUserId == null || remoteUserPwd == null || remoteDbNm == null
            || remoteTableNm == null) {
            throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.031", "원격 데이터베이스 접속정보를 정확히 설정하십시오."));
        }

        String remoteSelectList = (String)serviceParams.get("P_LINK_SELECT_LIST");
        if (remoteSelectList == null) {
            remoteSelectList = "*";
        }
        String remoteWhereText = (String)serviceParams.get("P_LINK_WHERE_TEXT");
        int bindingParamCount = Util.toInt(defineInfo.get("PV_CNT"), 0);

        String responseTimeParamNm = (String)serviceParams.get("P_PARAM_RESPONSE_TIME");
        String userId = (String)params.get(Consts.PK_USER_ID);

        String linkSelectText = "SELECT " + remoteSelectList //
            + " FROM " + remoteTableNm;
        if (remoteWhereText != null) {
            linkSelectText += " WHERE " + remoteWhereText;
        }

        DynamicDataSource dbcDataSource = new DynamicDataSource(remoteDiv, remoteIp, remotePort, remoteDbNm, remoteUserId, remoteUserPwd);
        PreparedStatement selectStatement = null;
        Set<Map.Entry<String, Object>> resultToParamEntries = resultToParams.entrySet();
        try {
            selectStatement = dbcDataSource.prepareStatement(linkSelectText);

            // 전표 단위 처리
            Map<String, Object> callParams = new HashMap<String, Object>();
            for (Map<String, Object> rowData : dsAddress) {

                long startTime = System.currentTimeMillis();
                selectStatement.clearParameters();
                // 조건 변수 바인딩
                for (int rIndex = 1; rIndex <= bindingParamCount; rIndex++) {
                    selectStatement.setObject(rIndex, rowData.get("PV_" + (rIndex < 10 ? "0" : "") + rIndex));
                }

                // 주소정제 데이터 서비스호출/ 결과반영 키/값으로 변경
                setParameter(rowData, callParams);

                // 우편번호 뷰 데이터 조회
                ResultSet rsAddress = selectStatement.executeQuery();
                // 첫번째 Record의 값으로 파라메터 세팅
                if (rsAddress.next()) {
                    for (Map.Entry<String, Object> resultToParamEntry : resultToParamEntries) {
                        callParams.put((String)resultToParamEntry.getValue(), rsAddress.getObject(resultToParamEntry.getKey()));
                    }
                    callParams.put((String)serviceParams.get("P_RESULT_CD"), "0");
                } else {
                    callParams.put((String)serviceParams.get("P_RESULT_CD"), "-1");
                    callParams.put((String)serviceParams.get("P_RESULT_MSG"),
                        (bindingParamCount > 0 ? "[" + rowData.get("PV_01") + "]" : "") + "데이터 없음");
                }

                TransactionStatus ts = beginTrans();
                try {
                    // 추가 정보 파라메터에 추가
                    callParams.put(Consts.PK_USER_ID, userId);
                    callParams.put(responseTimeParamNm, String.format("%.2f", (System.currentTimeMillis() - startTime) / 1000f));

                    Map<String, Object> callResultMap = callProcedure(UPDATE_ID_HANJIN_ADDRESS_INFO, callParams);
                    String oMsg = Util.getOutMessage(callResultMap);
                    if (!Consts.OK.equals(oMsg)) {
                        throw new RuntimeException(oMsg);
                    }

                    commitTrans(ts);
                } catch (Exception e) {
                    rollbackTrans(ts);
                }
            }
        } catch (Exception e) {
            Util.writeErrorMessage("EDExternalDBService[callHanjinGetAddressInformation]: ", e);
        } finally {
            JdbcUtils.closeStatement(selectStatement);
            dbcDataSource.releaseConnection();
        }
    }
}