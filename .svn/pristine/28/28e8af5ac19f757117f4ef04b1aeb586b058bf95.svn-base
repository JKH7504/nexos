package nexos.service.ed.common;

import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.net.ssl.SSLContext;

import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.ssl.TrustStrategy;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;

import nexos.framework.Consts;
import nexos.framework.Util;
import nexos.framework.json.MapTypeReference;
import nexos.framework.message.NexosMessage;
import nexos.framework.security.AuthenticationUtil;
import nexos.framework.support.ServiceSupport;

/**
 * Class: EDMapsRESTfulService<br>
 * Description: WMS Maps RESTful 서비스를 담당하는 Class(트랜잭션처리 담당)<br>
 * Copyright: Copyright (c) 2013 ASETEC Corporation. All rights reserved.<br>
 * Company : ASETEC<br>
 * 
 * @author ASETEC
 * @version 1.0
 *          <pre style="font-family: GulimChe; font-size: 12px;">
 * ---------------------------------------------------------------------------------------------------------------------
 *  Version    Date          Author           Description
 * ---------  ------------  ---------------  ---------------------------------------------------------------------------
 *  1.0        2020-10-07    ASETEC           신규작성
 * ---------------------------------------------------------------------------------------------------------------------
 *          </pre>
 */
@Service
public class EDMapsRESTfulService extends ServiceSupport {

    // private final Logger logger = LoggerFactory.getLogger(EDMapsRESTfulService.class);

    final String SELECT_ID_LD_CLOSING_DATA_INFO  = "WM.GET_LD_CLOSING_DATA_INFO";
    final String SELECT_ID_LD_CLOSING_ERROR_INFO = "WM.GET_LD_CLOSING_ERROR_INFO";
    final String SELECT_ID_NAVER_COORDINATE_INFO = "WM.GET_NAVER_COORDINATE_INFO";
    final String UPDATE_ID_DISTANCE_INFO         = "WM.SET_DISTANCE_INFO_UPDATE";

    /**
     * Timeout 세팅 처리된 RestTemplate 리턴
     * 
     * @param connectTimeout
     *        Connection Timeout, 초단위
     * @param readTimeout
     *        Data Read Timeout, 초단위
     * @return
     * @throws KeyStoreException
     * @throws NoSuchAlgorithmException
     * @throws KeyManagementException
     */
    private RestTemplate getRestTemplate(int connectTimeout, int readTimeout)
        throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {

        return getRestTemplate(connectTimeout, readTimeout, false);
    }

    /**
     * Https 인증서 검증 제외 및 Timeout 세팅 처리된 RestTemplate 리턴
     * 
     * @param connectTimeout
     *        Connection Timeout, 초단위
     * @param readTimeout
     *        Data Read Timeout, 초단위
     * @param sslTrusted
     *        Https 인증서 검증 제외 처리여부
     * @return
     * @throws KeyStoreException
     * @throws NoSuchAlgorithmException
     * @throws KeyManagementException
     */
    private RestTemplate getRestTemplate(int connectTimeout, int readTimeout, boolean sslTrusted)
        throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {

        HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();
        if (sslTrusted) {
            SSLContext sslContext = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() {
                @Override
                public boolean isTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                    return true;
                }
            }).build();
            CloseableHttpClient httpClient = HttpClients.custom() //
                .setSSLContext(sslContext) //
                .setSSLHostnameVerifier(new NoopHostnameVerifier()) //
                .build();
            requestFactory.setHttpClient(httpClient);
        }
        requestFactory.setConnectTimeout(connectTimeout * 1000);
        requestFactory.setReadTimeout(readTimeout * 1000);

        RestTemplate restTemplate = new RestTemplate(requestFactory);
        return restTemplate;
    }

    /**
     * 데이터의 키/값을 서비스 호출 데이터 키/값으로 변경 처리
     * 
     * @param rowData
     *        변경 처리할 데이터 맵
     * @param excludeKeys
     *        변경 처리에서 제외할 데이터 키
     * @param dataValues
     *        SOAP 서비스호출 데이터 키/값 맵
     * @param callParams
     *        결과반영 호출 파라메터 맵
     */
    private void setParameter(Map<String, Object> rowData, String[] excludeKeys, Map<String, Object> dataValues, Map<String, Object> callParams) {

        callParams.clear();
        dataValues.clear();
        if (excludeKeys == null) {
            excludeKeys = new String[] {};
        }
        for (Map.Entry<String, Object> entry : rowData.entrySet()) {
            String key = entry.getKey();
            for (String excludeKey : excludeKeys) {
                if (key.equals(excludeKey)) {
                    continue;
                }
            }
            // 서비스호출 데이터 키/값
            if (key.startsWith("DV_")) {
                dataValues.put(key, entry.getValue());
            }
            // 결과반영 호출 기본 파라메터
            else if (key.startsWith("P_")) {
                callParams.put(key, entry.getValue());
            }
        }
    }

    /**
     * [네이버] 거리계산 API 호출<br>
     * 
     * @param params
     *        <br>
     *        P_CENTER_CD: 물류센터코드<br>
     *        P_OUTBOUND_DATE: 출고일자<br>
     *        P_USER_ID: 사용자ID<br>
     *        P_THREAD_YN: 쓰레드로 동작할지 여부
     *        P_ERROR_PROC_YN: 오류내역 처리 여부
     * @return
     */
    public void callNaverDistanceCalculation(final Map<String, Object> params) {

        List<Map<String, Object>> dsLdClosingData = null;
        String errorProcYn = Util.nullToDefault(params.get("P_ERROR_PROC_YN"), Consts.NO);

        String selectId = Consts.NO.equals(errorProcYn) ? SELECT_ID_LD_CLOSING_DATA_INFO : SELECT_ID_LD_CLOSING_ERROR_INFO;
        dsLdClosingData = getDataList(selectId, params);

        if (dsLdClosingData == null || dsLdClosingData.size() == 0) {
            return;
        }

        String threadYn = Util.nullToDefault(params.get("P_THREAD_YN"), Consts.NO);
        if (Consts.YES.equals(threadYn)) {
            final List<Map<String, Object>> dsThreadLdClosingData = dsLdClosingData;
            new Thread(new Runnable() {

                @Override
                public void run() {
                    AuthenticationUtil.configureAuthentication();
                    try {
                        callNaverDistanceCalculation(params, dsThreadLdClosingData);
                    } catch (Exception e) {
                    } finally {
                        AuthenticationUtil.clearAuthentication();
                    }
                }
            }).start();
        } else {
            callNaverDistanceCalculation(params, dsLdClosingData);
        }
    }

    @SuppressWarnings("unchecked")
    private void callNaverDistanceCalculation(Map<String, Object> params, List<Map<String, Object>> dsLdClosingData) {

        // 서비스 호출 기본정보 처리, 첫번째 Record에만 존재 함
        Map<String, Object> defineInfo = dsLdClosingData.get(0);
        // 서비스 호출 기본정보 - 컬럼명 SP_로 시작, 입력시 P_로 변경하여 입력
        Map<String, Object> serviceParams = new HashMap<String, Object>();
        for (Map.Entry<String, Object> entry : defineInfo.entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("SP_")) {
                serviceParams.put(key.replaceFirst("SP_", "P_"), entry.getValue());
            }
        }
        // 서비스 호출 결과 파라메터 매핑 정보 파싱
        Map<String, Object> resultTagParams = Util.toKeyValues((String)serviceParams.get("P_RESULT_TAG_PARAM_MAP"));
        if (resultTagParams.size() == 0) {
            throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.032", "[RESULT_TAG_PARAM_MAP]파라메터 매핑 정보가 존재하지 않습니다."));
        }
        // 서비스 호출 헤더 매핑정보 파싱
        Map<String, Object> headerParams = Util.toKeyValues((String)serviceParams.get("P_HEADER_PARAM_MAP"));

        serviceParams.put("P_RESULT_TAG_PARAMS", resultTagParams);
        serviceParams.put("P_HEADER_PARAMS", headerParams);

        String userId = (String)params.get(Consts.PK_USER_ID);
        String errorProcYn = (String)params.get("P_ERROR_PROC_YN");

        Map<String, Object> callParams = new HashMap<String, Object>();
        Map<String, Object> dataValues = new HashMap<String, Object>();
        String[] excludeDataKeys = new String[] {"DV_UKEY"};
        for (Map<String, Object> rowData : dsLdClosingData) {
            // 거리계산 서비스호출/ 결과반영 키/값으로 변경
            setParameter(rowData, excludeDataKeys, dataValues, callParams);

            TransactionStatus ts = beginTrans();
            try {
                // 추가 정보 파라메터에 추가
                callParams.put(Consts.PK_USER_ID, userId);
                callParams.put("P_SEND_PARAMS", dataValues);
                callParams.put("P_ERROR_PROC_YN", errorProcYn);

                Map<String, Object> resultMap = sendNaverDirectionsRESTfulMessage(serviceParams, callParams);
                String oMsg = Util.getOutMessage(resultMap);

                if (Consts.NO.equals(errorProcYn)) {
                    List<Map<String, Object>> dsResult = (List<Map<String, Object>>)resultMap.get(Consts.PK_RESULT_DS);
                    for (Map<String, Object> paramMap : dsResult) {
                        if (!Consts.OK.equals(oMsg)) {
                            paramMap.put((String)resultTagParams.get(serviceParams.get("P_RESULT_CD_TAG")), "-1");
                            paramMap.put((String)resultTagParams.get(serviceParams.get("P_RESULT_MSG_TAG")), oMsg);
                        }
                        Map<String, Object> callResultMap = callProcedure(UPDATE_ID_DISTANCE_INFO, paramMap);
                        oMsg = Util.getOutMessage(callResultMap);
                        if (!Consts.OK.equals(oMsg)) {
                            throw new RuntimeException(oMsg);
                        }
                    }
                } else {
                    if (!Consts.OK.equals(oMsg)) {
                        resultMap.put((String)resultTagParams.get(serviceParams.get("P_RESULT_CD_TAG")), "-1");
                        resultMap.put((String)resultTagParams.get(serviceParams.get("P_RESULT_MSG_TAG")), oMsg);
                    }
                    Map<String, Object> callResultMap = callProcedure(UPDATE_ID_DISTANCE_INFO, resultMap);
                    oMsg = Util.getOutMessage(callResultMap);
                    if (!Consts.OK.equals(oMsg)) {
                        throw new RuntimeException(oMsg);
                    }
                }
                commitTrans(ts);
            } catch (Exception e) {
                rollbackTrans(ts);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private Map<String, Object> getNaverDirectionsRESTfulResponseMessage(Map<String, Object> serviceParams, Map<String, Object> callParams,
        ResponseEntity<String> restfulResponse) throws Exception {

        boolean isErrorProc = Consts.YES.equals(callParams.get("P_ERROR_PROC_YN"));
        Map<String, Object> resultMap = new HashMap<String, Object>();
        if (isErrorProc) {
            resultMap.putAll(callParams);
        }
        Util.setOutMessage(resultMap, Consts.OK);

        String responseBody = restfulResponse.getBody();
        // Http Call Error
        if (HttpStatus.OK != restfulResponse.getStatusCode()) {
            Util.setOutMessage(resultMap, responseBody);
        } else {
            // JSON parsing
            ObjectMapper objMapper = new ObjectMapper();
            try {
                Map<String, Object> responseMap = objMapper.readValue(responseBody, new MapTypeReference<String, Object>());
                Map<String, Object> resultTagParams = (Map<String, Object>)serviceParams.get("P_RESULT_TAG_PARAMS");
                String resultCdTag = (String)serviceParams.get("P_RESULT_CD_TAG");
                String resultMsgTag = (String)serviceParams.get("P_RESULT_MSG_TAG");
                for (Entry<String, Object> entry : resultTagParams.entrySet()) {
                    if (entry.getKey().equals(resultMsgTag) && Util.toInt(responseMap.get(resultCdTag)) == 0) {
                        resultMap.put((String)entry.getValue(), "");
                    } else {
                        resultMap.put((String)entry.getValue(), responseMap.get(entry.getKey()).toString());
                    }
                }

                String resultTag = (String)serviceParams.get("P_RESULT_TAG");
                // tagKeys : [route,traoptimal,summary,distance,goal,waypoints]
                String[] tagKeys = Util.nullToEmpty(resultTag).split(String.valueOf((char)13));

                boolean isSuccess = Util.toInt(responseMap.get(resultCdTag)) == 0;
                ArrayList<Object> option;
                Map<String, Object> summary = new HashMap<String, Object>();
                if (isSuccess) {
                    option = (ArrayList<Object>)((Map<String, Object>)responseMap.get(tagKeys[0])).get(tagKeys[1]);
                    summary = (Map<String, Object>)((Map<String, Object>)option.get(0)).get(tagKeys[2]);
                }

                float distance = 0;
                if (isErrorProc && isSuccess) {
                    // 오류내역 처리 시 정상일 경우
                    distance = Util.toInt(summary.get(tagKeys[3]));
                    // m -> km 변환
                    distance /= 1000;
                    resultMap.put((String)resultMap.get("P_UPDATE_COL_NM"), distance);
                } else if (!isErrorProc) {
                    // 오류내역 처리가 아닐 경우 List로 처리
                    List<Map<String, Object>> dsResult = new ArrayList<Map<String, Object>>();

                    String userId = (String)callParams.get(Consts.PK_USER_ID);
                    String updateParams = (String)callParams.get("P_UPDATE_PARAMS");
                    String[] params = Util.nullToEmpty(updateParams).split(String.valueOf((char)13));
                    ArrayList<Object> waypoints = (ArrayList<Object>)summary.get(tagKeys[5]);

                    try {
                        for (int i = 0, paramCnt = params.length; i < paramCnt; i++) {
                            Map<String, Object> paramMap = Util.toKeyValues(params[i], String.valueOf((char)12));
                            paramMap.putAll(resultMap);
                            paramMap.put(Consts.PK_USER_ID, userId);
                            // 정상일 경우
                            if (isSuccess) {
                                if (paramCnt == 1) {
                                    // 처리할 Row가 1건이면 Total Distance
                                    distance = Util.toInt(summary.get(tagKeys[3]));
                                } else if (paramCnt == i + 1) {
                                    // 마지막 Row면 도착지의 Distance
                                    distance = Util.toInt(((Map<String, Object>)summary.get(tagKeys[4])).get(tagKeys[3]));
                                } else {
                                    // 그 외 Row는 경유지의 Distance
                                    distance = Util.toInt(((Map<String, Object>)waypoints.get(i)).get(tagKeys[3]));
                                }
                                // m -> km 변환
                                distance /= 1000;
                                paramMap.put((String)paramMap.get("P_UPDATE_COL_NM"), distance);
                            }
                            dsResult.add(paramMap);
                        }
                        resultMap.put(Consts.PK_RESULT_DS, dsResult);
                    } catch (Exception e) {
                        dsResult.clear();
                        // 예외 메시지 업데이트를 위한 키값 생성
                        for (String param : params) {
                            Map<String, Object> paramMap = Util.toKeyValues(param, String.valueOf((char)12));
                            paramMap.put(Consts.PK_USER_ID, userId);
                            dsResult.add(paramMap);
                        }
                        resultMap.put(Consts.PK_RESULT_DS, dsResult);
                        Util.setOutMessage(resultMap, Util.getErrorMessage(e));
                    }
                }
            } catch (Exception e) {
                // JSON parsing Error
                Util.setOutMessage(resultMap, Util.getErrorMessage(e));
            }
        }
        return resultMap;
    }

    /**
     * RESTful Message 전송
     * 
     * @param serviceParams
     *        서비스 호출 파라메터
     *        <pre style="font-family: GulimChe; font-size: 12px;">
     * P_WEBSERVICE_URL          RESTful Url
     * P_METHOD_NM               RESTful Method Name
     * P_NS_PREFIX               사용안함
     * P_NS_URI                  사용안함
     * P_DATA_TAG                RESTful 호출 데이터가 입력될 상위 태그명
     * P_RESULT_TAG              결과 정보를 읽을 상위 태그명
     * P_RESULT_TAG_PARAM_MAP    결과 정보에서 읽은 태그 값을 반영할 때 사용할 파라메터 매핑
     * P_RESULT_CD_TAG           결과 정보에서 처리결과 코드를 읽을 태그명
     * P_RESULT_MSG_TAG          결과 정보에서 처리결과 메시지를 읽을 태그명
     * P_PARAM_RESPONSE_TIME     처리 응답시간을 기록할 파라메터명, NULL 허용
     * P_HEADER_PARAM_MAP        RESTful 호출 Header에 추가할 값, key1=value || WD.C_CR || key2=value
     * P_CONN_TIMEOUT            서비스 Connection Timeout(초)
     * P_READ_TIMEOUT            서비스 Data Read Timeout(초)
     *        </pre>
     * @param callParams
     *        결과반영 호출 파라메터
     *        <pre style="font-family: GulimChe; font-size: 12px;">
     * P_...                     기본 파라메터, P_로 시작하는 컬럼
     * P_SEND_PARAMS             Send Data Hashmap, DV로 시작하는 컬럼
     *        </pre>
     * @return
     */
    @SuppressWarnings("unchecked")
    public Map<String, Object> sendNaverDirectionsRESTfulMessage(Map<String, Object> serviceParams, Map<String, Object> callParams) {

        Map<String, Object> resultMap = new HashMap<String, Object>();
        Util.setOutMessage(resultMap, Consts.OK);

        try {
            String requestUrl = (String)serviceParams.get("P_WEBSERVICE_URL");
            if (Util.isNull(requestUrl)) {
                throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.033", "RESTful 전송 Url[P_WEBSERVICE_URL]이 지정되지 않았습니다."));
            }
            String methodNm = (String)serviceParams.get("P_METHOD_NM");
            if (Util.isNotNull(methodNm)) {
                if (requestUrl.endsWith("/")) {
                    requestUrl += methodNm;
                } else {
                    requestUrl += "/" + methodNm;
                }
            }
            Map<String, Object> sendParams = (Map<String, Object>)callParams.get("P_SEND_PARAMS");
            if (Util.isNull(sendParams)) {
                throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.034", "RESTful 전송 데이터[P_SEND_PARAMS]가 지정되지 않았습니다."));
            }

            String queryParams = "";
            String sendParamValue;
            for (Map.Entry<String, Object> sendParam : sendParams.entrySet()) {
                // LowerCase로 변경 - > DV_COLUMN_NM - > column_nm
                if (sendParam.getValue() == null) {
                    sendParamValue = "";
                } else {
                    sendParamValue = sendParam.getValue().toString();
                }
                queryParams += "&" + sendParam.getKey().substring(3).toLowerCase() + "=" + sendParamValue;
            }
            if (queryParams.length() > 0) {
                requestUrl += "?" + queryParams.substring(1);
            }
            // 추가 헤더 정보 세팅
            HttpHeaders headers = new HttpHeaders();
            Map<String, Object> headerParams = (Map<String, Object>)serviceParams.get("P_HEADER_PARAMS");
            if (Util.isNotNull(headerParams)) {
                for (Map.Entry<String, Object> headerParam : headerParams.entrySet()) {
                    headers.add(headerParam.getKey(), headerParam.getValue().toString());
                }
            }
            int connectTimeout = Math.min(Util.toInt(serviceParams.get("P_CONN_TIMEOUT"), 5), 5);
            int readTimeout = Math.min(Util.toInt(serviceParams.get("P_READ_TIMEOUT"), 20), 20);

            RestTemplate restTemplate = getRestTemplate(connectTimeout, readTimeout);
            ResponseEntity<String> response = null;
            HttpEntity<String> entity = new HttpEntity<String>(headers);
            response = restTemplate.exchange(requestUrl, HttpMethod.GET, entity, String.class);
            // 결과 파싱
            resultMap = getNaverDirectionsRESTfulResponseMessage(serviceParams, callParams, response);
        } catch (Exception e) {
            Util.setOutMessage(resultMap, Util.getErrorMessage(e));
        }

        return resultMap;
    }

    @SuppressWarnings("unchecked")
    private Map<String, Object> getCheckedValue(Map<String, Object> params) {

        Map<String, Object> resultMap = new HashMap<String, Object>();

        List<Map<String, Object>> checkedValue = (List<Map<String, Object>>)params.get(Consts.PK_CHECKED_VALUE);
        StringBuffer sbCheckedValues = new StringBuffer();
        for (Map<String, Object> rowData : checkedValue) {
            StringBuffer sbValues = new StringBuffer();
            for (Object value : rowData.values()) {
                sbValues.append(";").append(value);
            }
            sbCheckedValues.append(Consts.DV_SEPARATOR).append(sbValues.toString().substring(1));
        }
        resultMap.put(Consts.PK_CHECKED_VALUE, sbCheckedValues.toString().substring(1));

        return resultMap;
    }

    /**
     * [네이버] 좌표계산 API 호출<br>
     * 
     * @param params
     *        <br>
     *        P_CHECKED_VALUE: Master Table Keys<br>
     *        P_SERVICE_PARAMS: 서비스 호출 파라메터<br>
     *        P_USER_ID: 사용자ID<br>
     * @return
     */
    @SuppressWarnings("unchecked")
    public Map<String, Object> callNaverGetCoordinateInformation(final Map<String, Object> params) {

        Map<String, Object> result = null;
        Map<String, Object> callParams = (Map<String, Object>)params.get(Consts.PK_SERVICE_PARAMS);
        List<Map<String, Object>> dsCoordinate = null;

        TransactionStatus ts = beginTrans();
        try {
            getDefaultDao().insertCheckedValue(getCheckedValue(params));
            dsCoordinate = getDataList(SELECT_ID_NAVER_COORDINATE_INFO, callParams);
        } finally {
            rollbackTrans(ts);
        }

        if (dsCoordinate == null || dsCoordinate.size() == 0) {
            return result;
        }

        callParams.put(Consts.PK_USER_ID, params.get(Consts.PK_USER_ID));
        try {
            result = callNaverGetdsCoordinateInformation(callParams, dsCoordinate);
        } catch (Exception e) {
            throw new RuntimeException(Util.getErrorMessage(e));
        }

        return result;
    }

    private Map<String, Object> callNaverGetdsCoordinateInformation(Map<String, Object> params, List<Map<String, Object>> dsCoordinate) {

        Map<String, Object> result = new HashMap<String, Object>();
        Util.setOutMessage(result, Consts.OK);

        // 서비스 호출 기본정보 처리, 첫번째 Record에만 존재 함
        Map<String, Object> defineInfo = dsCoordinate.get(0);
        // 서비스 호출 기본정보 - 컬럼명 SP_로 시작, 입력시 P_로 변경하여 입력
        Map<String, Object> serviceParams = new HashMap<String, Object>();
        for (Map.Entry<String, Object> entry : defineInfo.entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("SP_")) {
                serviceParams.put(key.replaceFirst("SP_", "P_"), entry.getValue());
            }
        }
        // 서비스 호출 결과 파라메터 매핑 정보 파싱
        Map<String, Object> resultTagParams = Util.toKeyValues((String)serviceParams.get("P_RESULT_TAG_PARAM_MAP"));
        if (resultTagParams.size() == 0) {
            throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.032", "[RESULT_TAG_PARAM_MAP]파라메터 매핑 정보가 존재하지 않습니다."));
        }
        // 서비스 호출 헤더 매핑정보 파싱
        Map<String, Object> headerParams = Util.toKeyValues((String)serviceParams.get("P_HEADER_PARAM_MAP"));

        serviceParams.put("P_RESULT_TAG_PARAMS", resultTagParams);
        serviceParams.put("P_HEADER_PARAMS", headerParams);

        String tableNm = (String)params.get("P_TABLE_NM");
        String userId = (String)params.get(Consts.PK_USER_ID);

        Map<String, Object> callParams = new HashMap<String, Object>();
        Map<String, Object> dataValues = new HashMap<String, Object>();
        String[] excludeDataKeys = new String[] {"DV_UKEY"};
        int errorCnt = 0;
        for (Map<String, Object> rowData : dsCoordinate) {
            // 좌표계산 서비스호출/ 결과반영 키/값으로 변경
            setParameter(rowData, excludeDataKeys, dataValues, callParams);

            TransactionStatus ts = beginTrans();
            try {
                // 추가 정보 파라메터에 추가
                callParams.put(Consts.PK_USER_ID, userId);
                callParams.put("P_SEND_PARAMS", dataValues);

                Map<String, Object> resultMap = sendNaverGeocodeRESTfulMessage(serviceParams, callParams);
                String oMsg = Util.getOutMessage(resultMap);

                if ("DUMMY".equals(tableNm)) {
                    if (!Consts.OK.equals(oMsg)) {
                        Util.setOutMessage(result, oMsg);
                    } else {
                        for (Map.Entry<String, Object> entry : resultMap.entrySet()) {
                            String key = entry.getKey();
                            if (key.startsWith("P_")) {
                                result.put(key.replaceFirst("P_", "O_"), entry.getValue());
                            }
                        }
                    }
                } else {
                    if (!Consts.OK.equals(oMsg)) {
                        errorCnt++;
                    } else {
                        String updateId = (String)params.get("P_PROGRAM_ID") + ".UPDATE_" + tableNm;
                        getDefaultDao().updateSql(updateId, resultMap);
                    }
                }
                commitTrans(ts);
            } catch (Exception e) {
                rollbackTrans(ts);
                throw new RuntimeException(Util.getErrorMessage(e));
            }
        }
        if (errorCnt > 0) {
            Util.setOutMessage(result, NexosMessage.getDisplayMsg("JAVA.ED.035", "처리오류 건수 : " + errorCnt, new String[] {String.valueOf(errorCnt)}));
        }

        return result;
    }

    @SuppressWarnings("unchecked")
    private Map<String, Object> getNaverGeocodeRESTfulResponseMessage(Map<String, Object> serviceParams, Map<String, Object> callParams,
        ResponseEntity<String> restfulResponse) throws Exception {

        Map<String, Object> resultMap = new HashMap<String, Object>(callParams);

        String responseBody = restfulResponse.getBody();
        // Http Call Error
        if (HttpStatus.OK != restfulResponse.getStatusCode()) {
            Util.setOutMessage(resultMap, responseBody);
        } else {
            // JSON parsing
            ObjectMapper objMapper = new ObjectMapper();
            try {
                Map<String, Object> responseMap = objMapper.readValue(responseBody, new MapTypeReference<String, Object>());
                Map<String, Object> resultTagParams = (Map<String, Object>)serviceParams.get("P_RESULT_TAG_PARAMS");
                String resultCdTag = (String)serviceParams.get("P_RESULT_CD_TAG");
                String resultMsgTag = (String)serviceParams.get("P_RESULT_MSG_TAG");

                String resultTag = (String)serviceParams.get("P_RESULT_TAG");
                // tagKeys : [meta,totalCount,addresses]
                String[] tagKeys = Util.nullToEmpty(resultTag).split(String.valueOf((char)13));
                String oMsg = Consts.OK;
                if (Consts.OK.equals(responseMap.get(resultCdTag))) {
                    int totalCnt = Util.toInt(((Map<String, Object>)responseMap.get(tagKeys[0])).get(tagKeys[1]));
                    if (totalCnt == 0) {
                        oMsg = "주소 정보가 올바르지 않습니다.";
                    } else if (totalCnt > 1) {
                        oMsg = "좌표가 2건 이상 검색 되었습니다. 주소를 확인하십시오.";
                    } else {
                        Map<String, Object> addresses = (Map<String, Object>)((ArrayList<Object>)responseMap.get(tagKeys[2])).get(0);
                        for (Entry<String, Object> entry : resultTagParams.entrySet()) {
                            resultMap.put((String)entry.getValue(), addresses.get(entry.getKey()));
                        }
                    }
                } else {
                    oMsg = (String)responseMap.get(resultMsgTag);
                }
                Util.setOutMessage(resultMap, oMsg);
            } catch (Exception e) {
                // JSON parsing Error
                Util.setOutMessage(resultMap, Util.getErrorMessage(e));
            }
        }
        return resultMap;
    }

    /**
     * RESTful Message 전송
     * 
     * @param serviceParams
     *        서비스 호출 파라메터
     *        <pre style="font-family: GulimChe; font-size: 12px;">
     * P_WEBSERVICE_URL          RESTful Url
     * P_METHOD_NM               RESTful Method Name
     * P_NS_PREFIX               사용안함
     * P_NS_URI                  사용안함
     * P_DATA_TAG                RESTful 호출 데이터가 입력될 상위 태그명
     * P_RESULT_TAG              결과 정보를 읽을 상위 태그명
     * P_RESULT_TAG_PARAM_MAP    결과 정보에서 읽은 태그 값을 반영할 때 사용할 파라메터 매핑
     * P_RESULT_CD_TAG           결과 정보에서 처리결과 코드를 읽을 태그명
     * P_RESULT_MSG_TAG          결과 정보에서 처리결과 메시지를 읽을 태그명
     * P_PARAM_RESPONSE_TIME     처리 응답시간을 기록할 파라메터명, NULL 허용
     * P_HEADER_PARAM_MAP        RESTful 호출 Header에 추가할 값, key1=value || WD.C_CR || key2=value
     * P_CONN_TIMEOUT            서비스 Connection Timeout(초)
     * P_READ_TIMEOUT            서비스 Data Read Timeout(초)
     *        </pre>
     * @param callParams
     *        결과반영 호출 파라메터
     *        <pre style="font-family: GulimChe; font-size: 12px;">
     * P_...                     기본 파라메터, P_로 시작하는 컬럼
     * P_SEND_PARAMS             Send Data Hashmap, DV로 시작하는 컬럼
     *        </pre>
     * @return
     */
    @SuppressWarnings("unchecked")
    public Map<String, Object> sendNaverGeocodeRESTfulMessage(Map<String, Object> serviceParams, Map<String, Object> callParams) {

        Map<String, Object> resultMap = new HashMap<String, Object>();

        try {
            String requestUrl = (String)serviceParams.get("P_WEBSERVICE_URL");
            if (Util.isNull(requestUrl)) {
                throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.033", "RESTful 전송 Url[P_WEBSERVICE_URL]이 지정되지 않았습니다."));
            }
            String methodNm = (String)serviceParams.get("P_METHOD_NM");
            if (Util.isNotNull(methodNm)) {
                if (requestUrl.endsWith("/")) {
                    requestUrl += methodNm;
                } else {
                    requestUrl += "/" + methodNm;
                }
            }
            Map<String, Object> sendParams = (Map<String, Object>)callParams.get("P_SEND_PARAMS");
            if (Util.isNull(sendParams)) {
                throw new RuntimeException(NexosMessage.getDisplayMsg("JAVA.ED.034", "RESTful 전송 데이터[P_SEND_PARAMS]가 지정되지 않았습니다."));
            }

            String queryParams = "";
            String sendParamValue;
            for (Map.Entry<String, Object> sendParam : sendParams.entrySet()) {
                // LowerCase로 변경 - > DV_COLUMN_NM - > column_nm
                if (sendParam.getValue() == null) {
                    sendParamValue = "";
                } else {
                    sendParamValue = sendParam.getValue().toString();
                }
                queryParams += "&" + sendParam.getKey().substring(3).toLowerCase() + "=" + sendParamValue;
            }
            if (queryParams.length() > 0) {
                requestUrl += "?" + queryParams.substring(1);
            }
            // 추가 헤더 정보 세팅
            HttpHeaders headers = new HttpHeaders();
            Map<String, Object> headerParams = (Map<String, Object>)serviceParams.get("P_HEADER_PARAMS");
            if (Util.isNotNull(headerParams)) {
                for (Map.Entry<String, Object> headerParam : headerParams.entrySet()) {
                    headers.add(headerParam.getKey(), headerParam.getValue().toString());
                }
            }
            int connectTimeout = Math.min(Util.toInt(serviceParams.get("P_CONN_TIMEOUT"), 5), 5);
            int readTimeout = Math.min(Util.toInt(serviceParams.get("P_READ_TIMEOUT"), 20), 20);

            RestTemplate restTemplate = getRestTemplate(connectTimeout, readTimeout);
            ResponseEntity<String> response = null;
            HttpEntity<String> entity = new HttpEntity<String>(headers);
            response = restTemplate.exchange(requestUrl, HttpMethod.GET, entity, String.class);
            // 결과 파싱
            resultMap = getNaverGeocodeRESTfulResponseMessage(serviceParams, callParams, response);
        } catch (Exception e) {
            Util.setOutMessage(resultMap, Util.getErrorMessage(e));
        }

        return resultMap;
    }
}