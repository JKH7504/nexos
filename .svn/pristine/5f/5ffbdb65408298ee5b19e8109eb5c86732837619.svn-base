package nexos.service.ed.common;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sap.conn.jco.ext.DataProviderException;
import com.sap.conn.jco.ext.DataProviderException.Reason;
import com.sap.conn.jco.ext.DestinationDataEventListener;
import com.sap.conn.jco.ext.DestinationDataProvider;
import com.sap.conn.jco.ext.Environment;
import com.sap.conn.jco.ext.ServerDataEventListener;
import com.sap.conn.jco.ext.ServerDataProvider;

import nexos.framework.support.NexosSupport;

/**
 * Class: EDSAPDataProvider<br>
 * Description: SAP 접속 정보 처리를 담당하는 공통 Class<br>
 * Copyright: Copyright (c) 2013 ASETEC Corporation. All rights reserved.<br>
 * Company : ASETEC<br>
 * 
 * @author ASETEC
 * @version 1.0
 *          <pre style="font-family: GulimChe; font-size: 12px;">
 * ---------------------------------------------------------------------------------------------------------------------
 *  Version    Date          Author           Description
 * ---------  ------------  ---------------  ---------------------------------------------------------------------------
 *  1.0        2013-01-01    ASETEC           신규작성
 * ---------------------------------------------------------------------------------------------------------------------
 *          </pre>
 */
public class EDSAPDataProvider implements ServerDataProvider, DestinationDataProvider {

    private final Logger            logger               = LoggerFactory.getLogger(EDSAPDataProvider.class);

    private final String            PROVIDER_SERVER      = "SERVER";
    private final String            PROVIDER_DESTINATION = "DESTINATION";

    private String                  serverProgramID      = "";
    private String                  destinationName      = "";
    private Map<String, Properties> provider             = null;

    public EDSAPDataProvider() {

        serverProgramID = NexosSupport.getGlobalProperty("EDI.SAP.JCO_SERVER_PROGID", "");
        destinationName = NexosSupport.getGlobalProperty("EDI.SAP.JCO_SERVER_REP_DEST", "");

        provider = new HashMap<String, Properties>();

        // Server
        Properties serverProps = new Properties();
        serverProps.setProperty(ServerDataProvider.JCO_GWHOST, NexosSupport.getGlobalProperty("EDI.SAP.JCO_SERVER_GWHOST"));
        serverProps.setProperty(ServerDataProvider.JCO_GWSERV, NexosSupport.getGlobalProperty("EDI.SAP.JCO_SERVER_GWSERV"));
        serverProps.setProperty(ServerDataProvider.JCO_PROGID, serverProgramID);
        serverProps.setProperty(ServerDataProvider.JCO_REP_DEST, destinationName);
        serverProps.setProperty(ServerDataProvider.JCO_CONNECTION_COUNT, NexosSupport.getGlobalProperty("EDI.SAP.JCO_SERVER_CONNECTION_COUNT"));
        provider.put(String.format("%s.%s", PROVIDER_SERVER, serverProgramID), serverProps);

        // Destination
        Properties destinationProps = new Properties();
        // destinationProps.setProperty(ServerDataProvider.JCO_REP_DEST, siteDestinationName); // Destination Name 추가
        destinationProps.setProperty(DestinationDataProvider.JCO_ASHOST, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_ASHOST"));
        destinationProps.setProperty(DestinationDataProvider.JCO_SYSNR, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_SYSNR"));
        destinationProps.setProperty(DestinationDataProvider.JCO_CLIENT, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_CLIENT"));
        destinationProps.setProperty(DestinationDataProvider.JCO_USER, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_USER"));
        destinationProps.setProperty(DestinationDataProvider.JCO_PASSWD, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_PASSWD"));
        destinationProps.setProperty(DestinationDataProvider.JCO_LANG, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_LANG"));
        destinationProps.setProperty(DestinationDataProvider.JCO_PEAK_LIMIT, NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_PEAK_LIMIT"));
        destinationProps.setProperty(DestinationDataProvider.JCO_POOL_CAPACITY,
            NexosSupport.getGlobalProperty("EDI.SAP.JCO_DESTINATION_POOL_CAPACITY"));
        provider.put(String.format("%s.%s", PROVIDER_DESTINATION, destinationName), destinationProps);
    }

    /**
     * Site 기본 Server 외에 다른 Server를 사용할 경우 Server 정보를 추가<br>
     * 동일 Server 정보가 있을 경우 변경 됨. Site Server 정보는 변경불가
     * 
     * @param serverProgramID
     * @param serverProperties
     */
    public void addServer(String serverProgramID, Properties serverProperties) {

        if (serverProgramID.equals(serverProgramID)) {
            return;
        }
        provider.put(String.format("%s.%s", PROVIDER_SERVER, serverProgramID), serverProperties);
    }

    /**
     * Site 기본 Server 외에 다른 Server를 사용할 경우 Server 정보를 제거<br>
     * Site Server 정보는 제거불가
     * 
     * @param serverProgramID
     */
    public void removeServer(String serverProgramID) {

        if (destinationName.equals(serverProgramID)) {
            return;
        }
        provider.remove(String.format("%s.%s", PROVIDER_SERVER, serverProgramID));
    }

    /**
     * Site 기본 Destination 외에 다른 Destination 정보를 사용할 경우 Destination 정보를 추가<br>
     * 동일 DestinationName이 있을 경우 변경 됨. Site Destination은 변경불가
     * 
     * @param destinationName
     * @param destinationProperties
     */
    public void addDestination(String destinationName, Properties destinationProperties) {

        if (destinationName.equals(destinationName)) {
            return;
        }
        provider.put(String.format("%s.%s", PROVIDER_DESTINATION, destinationName), destinationProperties);
    }

    /**
     * Site 기본 Destination 외에 다른 Destination 정보를 사용할 경우 Destination 정보를 제거<br>
     * Site Destination은 제거불가
     * 
     * @param destinationName
     */
    public void removeDestination(String destinationName) {

        if (destinationName.equals(destinationName)) {
            return;
        }
        provider.remove(String.format("%s.%s", PROVIDER_DESTINATION, destinationName));
    }

    /**
     * Site Server Program ID
     * 
     * @return
     */
    public String getSiteServerProgramID() {

        return serverProgramID;
    }

    /**
     * Site Destination Name
     * 
     * @return
     */
    public String getSiteDestinationName() {

        return destinationName;
    }

    /**
     * Registers a provider for destination data.
     */
    public void registerDataProvider() {

        Environment.registerDestinationDataProvider(this);
        Environment.registerServerDataProvider(this);
    }

    /**
     * Unregisters a provider for destination data.
     */
    public void unregisterDataProvider() {

        Environment.unregisterDestinationDataProvider(this);
        Environment.unregisterServerDataProvider(this);
    }

    // ===============================================================================================================================================
    // [S]ServerDataProvider[S]
    // ===============================================================================================================================================
    @Override
    public Properties getServerProperties(String serverName) throws DataProviderException {

        logger.info("Providing server properties for server '" + serverName + "' using the specified properties");
        Properties serverProps = provider.get(String.format("%s.%s", PROVIDER_SERVER, serverName));
        if (serverProps == null) {
            throw new DataProviderException(Reason.INVALID_CONFIGURATION, "no server information.", null);
        }
        // logger.debug("Server proerties : " + siteProperties.toString());

        return serverProps;
    }

    @Override
    public void setServerDataEventListener(ServerDataEventListener listener) {
        // do nothing
    }
    // ===============================================================================================================================================
    // [E]ServerDataProvider[E]
    // ===============================================================================================================================================

    // ===============================================================================================================================================
    // [S]DestinationDataProvider[S]
    // ===============================================================================================================================================
    @Override
    public Properties getDestinationProperties(String destinationName) throws DataProviderException {

        // logger.info("Providing destination properties for destination '" + destinationName + "' using the specified properties");
        Properties destinationProps = provider.get(String.format("%s.%s", PROVIDER_DESTINATION, destinationName));
        if (destinationProps == null) {
            throw new DataProviderException(Reason.INVALID_CONFIGURATION, "no destination information.", null);
        }

        return destinationProps;
    }

    @Override
    public void setDestinationDataEventListener(DestinationDataEventListener listener) {
        // do nothing
    }
    // ===============================================================================================================================================
    // [E]DestinationDataProvider[E]
    // ===============================================================================================================================================

    // ===============================================================================================================================================
    // [S]ServerDataProvider, DestinationDataProvider[S]
    // ===============================================================================================================================================
    @Override
    public boolean supportsEvents() {
        return false;
    }
    // ===============================================================================================================================================
    // [E]ServerDataProvider, DestinationDataProvider[E]
    // ===============================================================================================================================================
}
