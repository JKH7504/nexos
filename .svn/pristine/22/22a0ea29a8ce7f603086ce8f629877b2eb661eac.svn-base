<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!--
  //====================================================================================================================
  // 적재파렛트출력 화면
  // Author : ASETEC
  // Date : 2023-06-14
  // Description
  // 적재파렛트출력 화면 CRUD Mapper
  //
  // ※ 작성은 반드시 알파벳 순서로 작성
  // ※ Mapper 파일은 [destination name]_sqlmap.xml 으로 생성
  // ※ Mapper namespace는 destination name 으로 설정
  //====================================================================================================================
  -->
  <!--
  cache         - 해당 네임스페이스을 위한 캐시 설정
  cache-ref     - 다른 네임스페이스의 캐시 설정에 대한 참조
  resultMap     - 데이터베이스 결과데이터를 객체에 로드하는 방법을 정의하는 엘리먼트
  parameterMap  - 비권장됨! 예전에 파라미터를 매핑하기 위해 사용되었으나 현재는 사용하지 않음
  sql           - 다른 구문에서 재사용하기 위한 SQL 조각
  insert        - 매핑된 INSERT 구문.
  update        - 매핑된 UPDATE 구문.
  delete        - 매핑된 DELEETE 구문.
  select        - 매핑된 SELECT 구문.
  //====================================================================================================================
  // ※ neXos Framework는 Vo를 사용하지 않음, HashMap만 사용 함
  //====================================================================================================================
  SELECT WS.GET_PROGRAM_MAPPER('CMC05080Q0' ,'CMSHIPID') AS SQLMAP_TEXT
    FROM DUAL;
  -->
<mapper namespace="CMC05080Q0">
  <!--
  //====================================================================================================================
  // SELECT SQLMAP
  //====================================================================================================================
  -->
  <!-- myBatis로 처리시 CURSOR를 리턴 받기 위해 resultMap 정의(컬럼 정의는 하지 않음) -->
  <!-- 네이스페이스(namespace) + _VIRTUALMAP 으로 resultMap 정의 -->
  <resultMap id="CMC05080Q0_VIRTUALMAP" type="hashmap"></resultMap>

  <!-- [S] - CMC05080Q0.RS_MASTER -->
  <select id="RS_MASTER" statementType="CALLABLE" parameterType="hashmap">
    {  #{O_RESULT_DS               ,mode=OUT   ,jdbcType=CURSOR     ,javaType=ResultSet  ,resultMap=CMC05080Q0_VIRTUALMAP} = call CMC05080Q0.RS_MASTER
      (#{P_CENTER_CD               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_SHIP_DATE               ,mode=IN    ,jdbcType=TIMESTAMP  ,javaType=Date      })
    }
  </select>
  <!-- [E] - CMC05080Q0.RS_MASTER -->


  <!--
  //====================================================================================================================
  // INSERT/UPDATE/DELETE SQLMAP
  //====================================================================================================================
  -->
  <!-- [S] - UPDATE_CMSHIPID [적재파렛트마스터] -->
  <update id="UPDATE_CMSHIPID" parameterType="hashmap">
    UPDATE CMSHIPID
       SET LAST_USER_ID             = #{P_USER_ID}
          ,LAST_DATETIME            = SYSDATE
          <if test="P_CREATE_DATE             != null">,CREATE_DATE              = #{P_CREATE_DATE}            </if>
          <if test="P_SEQ_NO                  != null">,SEQ_NO                   = #{P_SEQ_NO}                 </if>
          <if test="P_SHIP_SEQ                != null">,SHIP_SEQ                 = #{P_SHIP_SEQ}               </if>
          <if test="P_CENTER_CD               != null">,CENTER_CD                = #{P_CENTER_CD}              </if>
          <if test="P_PRINT_ID                != null">,PRINT_ID                 = #{P_PRINT_ID}               </if>
          <if test="P_PRINT_YN                != null">,PRINT_YN                 = #{P_PRINT_YN}               </if>
          <if test="P_REG_USER_ID             != null">,REG_USER_ID              = #{P_REG_USER_ID}            </if>
          <if test="P_REG_DATETIME            != null">
          ,REG_DATETIME             = DECODE(#{P_REG_DATETIME} ,'SYSDATE' ,SYSDATE ,WF.C_TO_DATETIME(#{P_REG_DATETIME}))
          </if>
     WHERE SHIP_ID            BETWEEN #{P_SHIP_ID1} AND #{P_SHIP_ID2}
  </update>
  <!-- [E] - UPDATE_CMSHIPID [적재파렛트마스터] -->


</mapper>