package nexos.service.lo;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;

import nexos.dao.lo.LOB08020Q0DAO;
import nexos.framework.Consts;
import nexos.framework.Util;
import nexos.framework.message.NexosMessage;
import nexos.framework.support.ServiceSupport;
import nexos.service.ed.common.EDRESTfulService;
import nexos.service.ed.common.EDSOAPService;

/**
 * Class: LOB08020Q0Service<br>
 * Description: 운송장조회(LOB08020Q0) 서비스를 담당하는 Class(트랜잭션처리 담당)<br>
 * Copyright: Copyright (c) 2013 ASETEC Corporation. All rights reserved.<br>
 * Company : ASETEC<br>
 * 
 * @author ASETEC
 * @version 1.0
 *          <pre style="font-family: GulimChe; font-size: 12px;">
 * ---------------------------------------------------------------------------------------------------------------------
 *  Version    Date          Author           Description
 * ---------  ------------  ---------------  ---------------------------------------------------------------------------
 *  1.0        2019-02-20    ASETEC           신규작성
 * ---------------------------------------------------------------------------------------------------------------------
 *          </pre>
 */
@Service
public class LOB08020Q0Service extends ServiceSupport {

    final String             SP_ID_GET_LO_OUTBOUND_STATE = "WF.GET_LO_OUTBOUND_STATE";

    @Autowired
    private LOB08020Q0DAO    dao;

    @Autowired
    private EDSOAPService    edSOAPService;

    @Autowired
    private EDRESTfulService edRESTfulService;

    // @Autowired
    // private EDExternalDBService edExternalDBService;

    /**
     * 출고스캔검수-송장 출력 횟수 업데이트 처리
     * 
     * @param params
     */
    public Map<String, Object> callSetWbNoPrintCntUpdate(Map<String, Object> params) throws Exception {

        Map<String, Object> result;

        TransactionStatus ts = beginTrans();
        try {
            result = dao.callSetWbNoPrintCntUpdate(params);
            String oMsg = Util.getOutMessage(result);
            // 오류면 Rollback
            if (!Consts.OK.equals(oMsg)) {
                throw new RuntimeException(oMsg);
            }
            commitTrans(ts);
        } catch (Exception e) {
            rollbackTrans(ts);
            throw new RuntimeException(Util.getErrorMessage(e));
        }

        return result;
    }

    /**
     * 저장/삭제시 상태를 체크해서 "30"이 아닐경우 저장/삭제 불가
     * 
     * @param params
     * @param checkState
     * @return
     */
    public String canProcessingdState(Map<String, Object> params, String checkState) {

        String result = Consts.OK;
        Map<String, Object> resultMap = callProcedure(SP_ID_GET_LO_OUTBOUND_STATE, params);

        String oMsg = Util.getOutMessage(resultMap);
        if (Consts.OK.equals(oMsg)) {
            String oOutboundState = (String)resultMap.get("O_OUTBOUND_STATE");
            if (!checkState.equals(oOutboundState)) {
                result = NexosMessage.getDisplayMsg("JAVA.STATE.001", "[진행상태 : " + oOutboundState + "] 처리할 수 있는 상태가 아닙니다.",
                    new String[] {oOutboundState});
            } else {
                result = oMsg;
            }
        } else {
            result = oMsg;
        }
        return result;
    }

    /**
     * 주소정제 재처리
     * 
     * @param params
     *        신규, 수정된 데이터
     */
    @SuppressWarnings("unchecked")
    public String callWBGetAddressInfo(Map<String, Object> params) throws Exception {

        String result = Consts.ERROR;
        try {
            List<Map<String, Object>> dsSave = (List<Map<String, Object>>)params.get(Consts.PK_DS_MASTER);
            String userId = (String)params.get(Consts.PK_USER_ID);

            StringBuffer sbCJGetAddressInformation = new StringBuffer();
            StringBuffer sbEPostGetAddressInformation = new StringBuffer();
            StringBuffer sbLotteGetAddressInformation = new StringBuffer();
            StringBuffer sbHanjinGetAddressInformation = new StringBuffer();

            int dsCnt = dsSave.size();
            for (int i = 0; i < dsCnt; i++) {
                Map<String, Object> rowData = dsSave.get(i);
                String CENTER_CD = (String)rowData.get("P_CENTER_CD");
                String BU_CD = (String)rowData.get("P_BU_CD");
                String OUTBOUND_DATE = (String)rowData.get("P_OUTBOUND_DATE");
                String OUTBOUND_NO = (String)rowData.get("P_OUTBOUND_NO");
                String CARRIER_CD = (String)rowData.get("P_CARRIER_CD");
                String CUST_CD = (String)rowData.get("P_CUST_CD");
                String HDC_DIV = (String)rowData.get("P_HDC_DIV");

                // 택배사구분 -> A1 - 한진택배B2B, B1 - 우체국택배B2B, C1 - CJ대한통운B2B, D1 - 롯데택배B2B
                switch (HDC_DIV) {
                    // 한진택배
                    case "A1":
                        sbHanjinGetAddressInformation.append(Consts.DV_SEPARATOR) //
                            .append(CENTER_CD).append(";") //
                            .append(BU_CD).append(";") //
                            .append(OUTBOUND_DATE).append(";") //
                            .append(OUTBOUND_NO).append(";") //
                            .append(CARRIER_CD).append(";") //
                            .append(CUST_CD).append(";") //
                            .append(HDC_DIV);
                        break;
                    // 우체국택배
                    case "B1":
                        sbEPostGetAddressInformation.append(Consts.DV_SEPARATOR) //
                            .append(CENTER_CD).append(";") //
                            .append(BU_CD).append(";") //
                            .append(OUTBOUND_DATE).append(";") //
                            .append(OUTBOUND_NO).append(";") //
                            .append(CARRIER_CD).append(";") //
                            .append(CUST_CD).append(";") //
                            .append(HDC_DIV);
                        break;
                    // CJ대한통운
                    case "C1":
                        sbCJGetAddressInformation.append(Consts.DV_SEPARATOR) //
                            .append(CENTER_CD).append(";") //
                            .append(BU_CD).append(";") //
                            .append(OUTBOUND_DATE).append(";") //
                            .append(OUTBOUND_NO).append(";") //
                            .append(CARRIER_CD).append(";") //
                            .append(CUST_CD).append(";") //
                            .append(HDC_DIV);
                        break;
                    // 롯데택배
                    case "D1":
                        sbLotteGetAddressInformation.append(Consts.DV_SEPARATOR) //
                            .append(CENTER_CD).append(";") //
                            .append(BU_CD).append(";") //
                            .append(OUTBOUND_DATE).append(";") //
                            .append(OUTBOUND_NO).append(";") //
                            .append(CARRIER_CD).append(";") //
                            .append(CUST_CD).append(";") //
                            .append(HDC_DIV);
                        break;
                }
            }

            Map<String, Object> callParams;
            // CJ대한통운 주소정제 서비스 호출
            if (sbCJGetAddressInformation.length() > 0) {
                callParams = new HashMap<String, Object>();
                callParams.put(Consts.PK_USER_ID, userId);
                callParams.put(Consts.PK_CHECKED_VALUE, sbCJGetAddressInformation.toString().substring(1)); // 첫번째 Separator 제거
                callParams.put("P_THREAD_YN", Consts.NO); // 별도 쓰레드로 처리 여부
                edSOAPService.callCJGetAddressInformation(callParams);
            }

            // 우체국택배 주소정제 서비스 호출
            if (sbEPostGetAddressInformation.length() > 0) {
                callParams = new HashMap<String, Object>();
                callParams.put(Consts.PK_USER_ID, userId);
                callParams.put(Consts.PK_CHECKED_VALUE, sbEPostGetAddressInformation.toString().substring(1)); // 첫번째 Separator 제거
                callParams.put("P_THREAD_YN", Consts.NO); // 별도 쓰레드로 처리 여부
                edRESTfulService.callEPostGetAddressInformation(callParams);
            }

            // 롯데택배 주소정제 서비스 호출
            if (sbLotteGetAddressInformation.length() > 0) {
                callParams = new HashMap<String, Object>();
                callParams.put(Consts.PK_USER_ID, userId);
                callParams.put(Consts.PK_CHECKED_VALUE, sbLotteGetAddressInformation.toString().substring(1)); // 첫번째 Separator 제거
                callParams.put("P_THREAD_YN", Consts.NO); // 별도 쓰레드로 처리 여부
                edRESTfulService.callLotteGetAddressInformation(callParams);
            }

            // 한진택배 주소정제 서비스 호출
            if (sbHanjinGetAddressInformation.length() > 0) {
                callParams = new HashMap<String, Object>();
                callParams.put(Consts.PK_USER_ID, userId);
                callParams.put(Consts.PK_CHECKED_VALUE, sbHanjinGetAddressInformation.toString().substring(1)); // 첫번째 Separator 제거
                callParams.put("P_THREAD_YN", Consts.NO); // 별도 쓰레드로 처리 여부
                callParams.put("P_UPDATE_YN", Consts.YES); // 주소정제 결과 DB 업데이트 여부
                edRESTfulService.callHanjinGetAddressInformation(callParams);
            }

            result = Consts.OK;
        } catch (Exception e) {
            throw new RuntimeException(Util.getErrorMessage(e));
        }
        return result;
    }
}