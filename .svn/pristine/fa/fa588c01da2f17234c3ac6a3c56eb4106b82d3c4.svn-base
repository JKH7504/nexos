/**
 * <pre>
 *  ==================================================================================================================================================
 *  프로그램ID         : LFC03010E0
 *  프로그램명         : 일반단가관리
 *  프로그램설명       : 일반단가관리 화면 Javascript
 *  작성자             : Copyright (c) 2013 ASETEC Corporation. All rights reserved.
 *  작성일자           : 2021-03-24
 *  버전               : 1.0
 * 
 *  --------------------------------------------------------------------------------------------------------------------------------------------------
 *  버전       작성일자      작성자           설명
 *  ---------  ------------  ---------------  --------------------------------------------------------------------------------------------------------
 *  1.0        2021-03-24    ASETEC           신규작성
 *  --------------------------------------------------------------------------------------------------------------------------------------------------
 * 
 *  ==================================================================================================================================================
 * </pre>
 */

/**
 * 화면 초기화 - 화면 로드시 자동 호출 됨
 */
function _Initialize() {

    // 단위화면에서 사용될 일반 전역 변수 정의
    $NC.setGlobalVar({
        // 현재 액티브된 뷰 및 그리드 정보
        activeView: {
            container: "",
            master: null,
            grdMaster: null
        },
        KEEP_DIV: null,
        UNIT_DIV: null,
        CALC_QTY_DIV: null,
        CALC_AMT_DIV: null,
        PRICE_DIV: "01" // 단가관리구분 - 일반단가
    });

    // 보관구분
    $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
        P_QUERY_ID: "WC.POP_CMCODE",
        P_QUERY_PARAMS: {
            P_COMMON_GRP: "KEEP_DIV",
            P_COMMON_CD: $ND.C_ALL,
            P_VIEW_DIV: "1" // 1:등록팝업, 2:조회팝업
        }
    }, function(ajaxData) {
        $NC.G_VAR.KEEP_DIV = $NC.toArray(ajaxData);
    });

    // 정산단위구분
    $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
        P_QUERY_ID: "WC.POP_CMCODE",
        P_QUERY_PARAMS: {
            P_COMMON_GRP: "UNIT_DIV",
            P_COMMON_CD: $ND.C_ALL,
            P_ATTR02_CD: $ND.C_YES, // 작업수수료대상
            P_VIEW_DIV: "1" // 1:등록팝업, 2:조회팝업
        }
    }, function(ajaxData) {
        $NC.G_VAR.UNIT_DIV = $NC.toArray(ajaxData);
    });

    // 수량계산구분
    $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
        P_QUERY_ID: "WC.POP_CMCODE",
        P_QUERY_PARAMS: {
            P_COMMON_GRP: "CALC_QTY_DIV",
            P_COMMON_CD: $ND.C_ALL,
            P_VIEW_DIV: "1" // 1:등록팝업, 2:조회팝업
        }
    }, function(ajaxData) {
        $NC.G_VAR.CALC_QTY_DIV = $NC.toArray(ajaxData);
    });

    // 금액계산구분
    $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
        P_QUERY_ID: "WC.POP_CMCODE",
        P_QUERY_PARAMS: {
            P_COMMON_GRP: "CALC_AMT_DIV",
            P_COMMON_CD: $ND.C_ALL,
            P_VIEW_DIV: "1" // 1:등록팝업, 2:조회팝업
        }
    }, function(ajaxData) {
        $NC.G_VAR.CALC_AMT_DIV = $NC.toArray(ajaxData);
    });

    // 그리드 초기화
    grdMasterInitialize();
    grdDetail1Initialize();
    grdDetail2Initialize();
    grdDetail3Initialize();

    $NC.G_VAR.activeView.master = "#grdMaster";
    $NC.G_VAR.activeView.grdMaster = G_GRDMASTER;

    // 조회조건 팝업
    $("#btnQContract_No").click(showContractPopup);
    $("#btnQBill_Div").click(showBillPopup);

    // 조회조건 - 계약기준월 세팅
    $NC.setInitMonthPicker("#dtpQContract_Month");

    G_GRDMASTER.focused = true;
}

function _OnLoaded() {

    // 스플리터 초기화
    $NC.setInitSplitter("#divSplitterArea1", "h", 350, 150, 300);
    $("#divSplitterArea2").children("div:first").width(600);
    $("#divSplitterArea3").children("div:first").height(150);
    $NC.setInitSplitter("#divSplitterArea3", "h", 150, 150, 150);
    $NC.setInitSplitter("#divSplitterArea2", "v", 600, 250);
}

// 화면 리사이즈 Offset 계산
function _SetResizeOffset() {

}

/**
 * Window Resize Event - Window Size 조정시호출 됨
 */
function _OnResize(parent, viewWidth, viewHeight) {

    // Splitter 컨테이너 크기 조정
    $NC.resizeContainer("#divSplitterArea1");
    $NC.resizeGrid("#grdMaster");
    $NC.resizeGrid("#grdDetail1");
    $NC.resizeGrid("#grdDetail2");
    $NC.resizeGrid("#grdDetail3");
}

/**
 * Condition Change Event - Input, Select Change 시 호출 됨
 */
function _OnConditionChange(e, view, val) {

    var id = view.prop("id").substr(4).toUpperCase();
    switch (id) {
        case "CONTRACT_NO":
            $NP.onContractChange(val, {
                P_CONTRACT_NO: val,
                P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
                P_VIEW_DIV: "2" // 1:등록팝업, 2:조회팝업
            }, onContractPopup);
            return;
        case "BILL_DIV":
            $NP.onBillChange(val, {
                P_CONTRACT_NO: $NC.getValue("#edtQContract_No"),
                P_BILL_DIV: val,
                P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
                P_VIEW_DIV: "2" // 1:등록팝업, 2:조회팝업
            }, onBillPopup);
            return;
        case "CONTRACT_MONTH":
            if ($NC.isNotNull(val)) {
                $NC.setValueMonthPicker(view, val, $NC.getDisplayMsg("JS.LFC03010E0.001", "계약월을 정확히 입력하십시오."));
            }
            break;
    }

    onChangingCondition();
}

/**
 * Inquiry Button Event - 메인 상단 조회 버튼 클릭시 호출 됨
 */
function _Inquiry() {

    // 조회조건 체크
    var CONTRACT_MONTH = $NC.getValue("#dtpQContract_Month");
    if ($NC.isNotNull(CONTRACT_MONTH)) {
        if (!$NC.isMonth(CONTRACT_MONTH)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.001", "계약월을 정확히 입력하십시오."));
            $NC.setFocus("#dtpQContract_Month");
            return;
        }
    }

    var CONTRACT_NO = $NC.getValue("#edtQContract_No", true);
    var BILL_DIV = $NC.getValue("#edtQBill_Div", true);

    // 조회시 전역 변수 값 초기화
    $NC.setInitGridVar(G_GRDMASTER);
    // 파라메터 세팅
    G_GRDMASTER.queryParams = {
        P_BILL_DIV: BILL_DIV,
        P_CONTRACT_NO: CONTRACT_NO,
        P_CONTRACT_MONTH: CONTRACT_MONTH + $NC.iif($NC.isNotNull(CONTRACT_MONTH), "-01", "")
    };
    // 데이터 조회
    $NC.serviceCall("/LFC03010E0/getDataSet.do", $NC.getGridParams(G_GRDMASTER), onGetMaster);
}

/**
 * New Button Event - 메인 상단 신규 버튼 클릭시 호출 됨
 */
function _New() {

    var newRowData;

    // grdMaster에 포커스가 있을 경우
    if (G_GRDMASTER.focused) {

        // 마지막 선택 Row Validation 체크
        if (!$NC.isGridValidLastRow(G_GRDMASTER)) {
            return;
        }

        var CONTRACT_NO = $NC.getValue("#edtQContract_No", true);
        var BILL_DIV = $NC.getValue("#edtQBill_Div", true);

        // 신규 데이터는 CRUD를 "N"으로 하고 데이터 입력 후 다른 Row로 이동하면 "C"로 변경
        newRowData = {
            BILL_DIV: null,
            BILL_DIV_D: null,
            BILL_DIV_F: null,
            CONTRACT_NO: null,
            CONTRACT_NM: null,
            CONTRACT_NO_F: null,
            CONTRACT_DATE: $NC.getFirstDate($NC.G_USERINFO.LOGIN_DATE),
            KEEP_DIV: $ND.C_BASE_KEEP_DIV,
            DEPART_CD: $ND.C_BASE_DEPART_CD,
            LINE_CD: $ND.C_BASE_LINE_CD,
            CLASS_CD: $ND.C_BASE_CLASS_CD,
            BRAND_CD: $ND.C_BASE_BRAND_CD,
            ITEM_CD: $ND.C_BASE_ITEM_CD,
            BASIC_AMT: 0,
            UNIT_DIV: null,
            UNIT_PRICE: 0,
            CALC_QTY_DIV: "10",
            CALC_QTY_DIV_F: $NC.getGridComboName(G_GRDMASTER, {
                columnId: "CALC_QTY_DIV_F",
                searchVal: "10",
                dataCodeField: "COMMON_CD",
                dataFullNameField: "COMMON_CD_F"
            }),
            CALC_AMT_DIV: "10",
            CALC_AMT_DIV_F: $NC.getGridComboName(G_GRDMASTER, {
                columnId: "CALC_AMT_DIV_F",
                searchVal: "10",
                dataCodeField: "COMMON_CD",
                dataFullNameField: "COMMON_CD_F"
            }),
            CONTRACT_END_DATE: null,
            REMARK1: null,
            id: $NC.getGridNewRowId(),
            CRUD: $ND.C_DV_CRUD_N
        };

        // 신규 데이터 생성 및 이벤트 호출
        $NC.newGridRowData(G_GRDMASTER, newRowData);

        // 계약번호 기준, 조회조건 세팅할 경우 계약번호 팝업 호출
        if (CONTRACT_NO != $ND.C_ALL) {
            $NP.onContractBillChange(CONTRACT_NO, {
                P_CONTRACT_NO: CONTRACT_NO,
                P_BILL_DIV: BILL_DIV,
                P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
                P_VIEW_DIV: "1"
            }, grdMasterOnContractBillPopup);
        }
    }
    // Detail에 포커스가 있을 경우
    else {
        if (G_GRDMASTER.data.getLength() == 0 || $NC.isNull(G_GRDMASTER.lastRow)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.002", "기본수수료가 없습니다.\n\n기본수수료를 먼저 등록하십시오."));
            return;
        }
        var refRowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);
        if (refRowData.CRUD == $ND.C_DV_CRUD_N || refRowData.CRUD == $ND.C_DV_CRUD_C) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.003", "신규 기본수수료입니다.\n\n저장 후 수수료 기준을 등록하십시오."));
            return;
        }

        // grdDetail1에 포커스가 있을 경우
        if (G_GRDDETAIL1.focused) {

            // 마지막 선택 Row Validation 체크
            if (!$NC.isGridValidLastRow(G_GRDDETAIL1)) {
                return;
            }

            // 신규 데이터는 CRUD를 "N"으로 하고 데이터 입력 후 다른 Row로 이동하면 "C"로 변경
            newRowData = {
                BILL_DIV: refRowData.BILL_DIV,
                CONTRACT_NO: refRowData.CONTRACT_NO,
                CONTRACT_DATE: refRowData.CONTRACT_DATE,
                KEEP_DIV: null,
                DEPART_CD: $ND.C_BASE_DEPART_CD,
                LINE_CD: $ND.C_BASE_LINE_CD,
                CLASS_CD: $ND.C_BASE_CLASS_CD,
                BRAND_CD: $ND.C_BASE_BRAND_CD,
                ITEM_CD: $ND.C_BASE_ITEM_CD,
                BASIC_AMT: 0,
                UNIT_DIV: refRowData.UNIT_DIV,
                UNIT_DIV_F: $NC.getGridComboName(G_GRDDETAIL1, {
                    columnId: "UNIT_DIV_F",
                    searchVal: refRowData.UNIT_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                UNIT_PRICE: 0,
                CALC_QTY_DIV: refRowData.CALC_QTY_DIV,
                CALC_QTY_DIV_F: $NC.getGridComboName(G_GRDDETAIL1, {
                    columnId: "CALC_QTY_DIV_F",
                    searchVal: refRowData.CALC_QTY_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                CALC_AMT_DIV: refRowData.CALC_AMT_DIV,
                CALC_AMT_DIV_F: $NC.getGridComboName(G_GRDDETAIL1, {
                    columnId: "CALC_AMT_DIV_F",
                    searchVal: refRowData.CALC_AMT_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                REMARK1: null,
                id: $NC.getGridNewRowId(),
                CRUD: $ND.C_DV_CRUD_N
            };

            // 신규 데이터 생성 및 이벤트 호출
            $NC.newGridRowData(G_GRDDETAIL1, newRowData);
        }
        // grdDetail2에 포커스가 있을 경우
        else if (G_GRDDETAIL2.focused) {

            // 마지막 선택 Row Validation 체크
            if (!$NC.isGridValidLastRow(G_GRDDETAIL2)) {
                return;
            }

            // 신규 데이터는 CRUD를 "N"으로 하고 데이터 입력 후 다른 Row로 이동하면 "C"로 변경
            newRowData = {
                BILL_DIV: refRowData.BILL_DIV,
                CONTRACT_NO: refRowData.CONTRACT_NO,
                CONTRACT_DATE: refRowData.CONTRACT_DATE,
                KEEP_DIV: $ND.C_BASE_KEEP_DIV,
                DEPART_CD: null,
                LINE_CD: null,
                CLASS_CD: null,
                BRAND_CD: $ND.C_BASE_BRAND_CD,
                ITEM_CD: $ND.C_BASE_ITEM_CD,
                BASIC_AMT: 0,
                UNIT_DIV: refRowData.UNIT_DIV,
                UNIT_DIV_F: $NC.getGridComboName(G_GRDDETAIL2, {
                    columnId: "UNIT_DIV_F",
                    searchVal: refRowData.UNIT_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                UNIT_PRICE: 0,
                CALC_QTY_DIV: refRowData.CALC_QTY_DIV,
                CALC_QTY_DIV_F: $NC.getGridComboName(G_GRDDETAIL2, {
                    columnId: "CALC_QTY_DIV_F",
                    searchVal: refRowData.CALC_QTY_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                CALC_AMT_DIV: refRowData.CALC_AMT_DIV,
                CALC_AMT_DIV_F: $NC.getGridComboName(G_GRDDETAIL2, {
                    columnId: "CALC_AMT_DIV_F",
                    searchVal: refRowData.CALC_AMT_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                REMARK1: null,
                id: $NC.getGridNewRowId(),
                CRUD: $ND.C_DV_CRUD_N
            };

            // 신규 데이터 생성 및 이벤트 호출
            $NC.newGridRowData(G_GRDDETAIL2, newRowData);
        }
        // grdDetail3에 포커스가 있을 경우
        else {

            // 마지막 선택 Row Validation 체크
            if (!$NC.isGridValidLastRow(G_GRDDETAIL3)) {
                return;
            }

            // 신규 데이터는 CRUD를 "N"으로 하고 데이터 입력 후 다른 Row로 이동하면 "C"로 변경
            newRowData = {
                BILL_DIV: refRowData.BILL_DIV,
                CONTRACT_NO: refRowData.CONTRACT_NO,
                CONTRACT_DATE: refRowData.CONTRACT_DATE,
                KEEP_DIV: $ND.C_BASE_KEEP_DIV,
                DEPART_CD: $ND.C_BASE_DEPART_CD,
                LINE_CD: $ND.C_BASE_LINE_CD,
                CLASS_CD: $ND.C_BASE_CLASS_CD,
                BRAND_CD: null,
                ITEM_CD: null,
                BASIC_AMT: 0,
                UNIT_DIV: refRowData.UNIT_DIV,
                UNIT_DIV_F: $NC.getGridComboName(G_GRDDETAIL3, {
                    columnId: "UNIT_DIV_F",
                    searchVal: refRowData.UNIT_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                UNIT_PRICE: 0,
                CALC_QTY_DIV: refRowData.CALC_QTY_DIV,
                CALC_QTY_DIV_F: $NC.getGridComboName(G_GRDDETAIL3, {
                    columnId: "CALC_QTY_DIV_F",
                    searchVal: refRowData.CALC_QTY_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                CALC_AMT_DIV: refRowData.CALC_AMT_DIV,
                CALC_AMT_DIV_F: $NC.getGridComboName(G_GRDDETAIL3, {
                    columnId: "CALC_AMT_DIV_F",
                    searchVal: refRowData.CALC_AMT_DIV,
                    dataCodeField: "COMMON_CD",
                    dataFullNameField: "COMMON_CD_F"
                }),
                REMARK1: null,
                id: $NC.getGridNewRowId(),
                CRUD: $ND.C_DV_CRUD_N
            };

            // 신규 데이터 생성 및 이벤트 호출
            $NC.newGridRowData(G_GRDDETAIL3, newRowData);
        }
    }
}

/**
 * Save Button Event - 메인 상단 저장 버튼 클릭시 호출 됨
 */
function _Save() {

    if (G_GRDMASTER.data.getLength() == 0) {
        alert($NC.getDisplayMsg("JS.LFC03010E0.004", "저장할 데이터가 없습니다."));
        return;
    }

    // 마지막 선택 Row Validation 체크
    if (!$NC.isGridValidLastRow(G_GRDMASTER)) {
        return;
    }
    // 마지막 선택 Row Validation 체크
    if (!$NC.isGridValidLastRow(G_GRDDETAIL1)) {
        return;
    }
    // 마지막 선택 Row Validation 체크
    if (!$NC.isGridValidLastRow(G_GRDDETAIL2)) {
        return;
    }
    // 마지막 선택 Row Validation 체크
    if (!$NC.isGridValidLastRow(G_GRDDETAIL3)) {
        return;
    }

    var rowData, rIndex, rCount;
    // 기준수수료 수정 데이터
    var dsMaster = [];
    for (rIndex = 0, rCount = G_GRDMASTER.data.getLength(); rIndex < rCount; rIndex++) {
        rowData = G_GRDMASTER.data.getItem(rIndex);
        if (rowData.CRUD == $ND.C_DV_CRUD_R) {
            continue;
        }
        dsMaster.push({
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE,
            P_KEEP_DIV: rowData.KEEP_DIV,
            P_DEPART_CD: rowData.DEPART_CD,
            P_LINE_CD: rowData.LINE_CD,
            P_CLASS_CD: rowData.CLASS_CD,
            P_BRAND_CD: rowData.BRAND_CD,
            P_ITEM_CD: rowData.ITEM_CD,
            P_BASIC_AMT: rowData.BASIC_AMT,
            P_UNIT_DIV: rowData.UNIT_DIV,
            P_UNIT_PRICE: rowData.UNIT_PRICE,
            P_CALC_QTY_DIV: rowData.CALC_QTY_DIV,
            P_CALC_AMT_DIV: rowData.CALC_AMT_DIV,
            P_REMARK1: rowData.REMARK1,
            P_CRUD: rowData.CRUD
        });
    }

    // 보관유형별 / 상품그룹별 / 상품별 수수료 수정 데이터
    var dsDetail = [];
    for (rIndex = 0, rCount = G_GRDDETAIL1.data.getLength(); rIndex < rCount; rIndex++) {
        rowData = G_GRDDETAIL1.data.getItem(rIndex);
        if (rowData.CRUD == $ND.C_DV_CRUD_R) {
            continue;
        }
        dsDetail.push({
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE,
            P_KEEP_DIV: rowData.KEEP_DIV,
            P_DEPART_CD: rowData.DEPART_CD,
            P_LINE_CD: rowData.LINE_CD,
            P_CLASS_CD: rowData.CLASS_CD,
            P_BRAND_CD: rowData.BRAND_CD,
            P_ITEM_CD: rowData.ITEM_CD,
            P_BASIC_AMT: rowData.BASIC_AMT,
            P_UNIT_DIV: rowData.UNIT_DIV,
            P_UNIT_PRICE: rowData.UNIT_PRICE,
            P_CALC_QTY_DIV: rowData.CALC_QTY_DIV,
            P_CALC_AMT_DIV: rowData.CALC_AMT_DIV,
            P_REMARK1: rowData.REMARK1,
            P_CRUD: rowData.CRUD
        });
    }
    for (rIndex = 0, rCount = G_GRDDETAIL2.data.getLength(); rIndex < rCount; rIndex++) {
        rowData = G_GRDDETAIL2.data.getItem(rIndex);
        if (rowData.CRUD == $ND.C_DV_CRUD_R) {
            continue;
        }
        dsDetail.push({
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE,
            P_KEEP_DIV: rowData.KEEP_DIV,
            P_DEPART_CD: rowData.DEPART_CD,
            P_LINE_CD: rowData.LINE_CD,
            P_CLASS_CD: rowData.CLASS_CD,
            P_BRAND_CD: rowData.BRAND_CD,
            P_ITEM_CD: rowData.ITEM_CD,
            P_BASIC_AMT: rowData.BASIC_AMT,
            P_UNIT_DIV: rowData.UNIT_DIV,
            P_UNIT_PRICE: rowData.UNIT_PRICE,
            P_CALC_QTY_DIV: rowData.CALC_QTY_DIV,
            P_CALC_AMT_DIV: rowData.CALC_AMT_DIV,
            P_REMARK1: rowData.REMARK1,
            P_CRUD: rowData.CRUD
        });
    }
    for (rIndex = 0, rCount = G_GRDDETAIL3.data.getLength(); rIndex < rCount; rIndex++) {
        rowData = G_GRDDETAIL3.data.getItem(rIndex);
        if (rowData.CRUD == $ND.C_DV_CRUD_R) {
            continue;
        }
        dsDetail.push({
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE,
            P_KEEP_DIV: rowData.KEEP_DIV,
            P_DEPART_CD: rowData.DEPART_CD,
            P_LINE_CD: rowData.LINE_CD,
            P_CLASS_CD: rowData.CLASS_CD,
            P_BRAND_CD: rowData.BRAND_CD,
            P_ITEM_CD: rowData.ITEM_CD,
            P_BASIC_AMT: rowData.BASIC_AMT,
            P_UNIT_DIV: rowData.UNIT_DIV,
            P_UNIT_PRICE: rowData.UNIT_PRICE,
            P_CALC_QTY_DIV: rowData.CALC_QTY_DIV,
            P_CALC_AMT_DIV: rowData.CALC_AMT_DIV,
            P_REMARK1: rowData.REMARK1,
            P_CRUD: rowData.CRUD
        });
    }

    if (dsMaster.length == 0 && dsDetail.length == 0) {
        alert($NC.getDisplayMsg("JS.LFC03010E0.005", "데이터 수정 후 저장하십시오."));
        return;
    }

    $NC.serviceCall("/LFC03010E0/save.do", {
        P_DS_MASTER: dsMaster,
        P_DS_DETAIL: dsDetail,
        P_USER_ID: $NC.G_USERINFO.USER_ID
    }, onSave, onSaveError);
}

/**
 * Delete Button Event - 메인 상단 삭제 버튼 클릭시 호출 됨
 */
function _Delete() {

    var rowData;
    if (G_GRDMASTER.focused) {

        if (G_GRDMASTER.data.getLength() == 0 || $NC.isNull(G_GRDMASTER.lastRow)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.006", "삭제할 데이터가 없습니다."));
            return;
        }

        if (!confirm($NC.getDisplayMsg("JS.LFC03010E0.007", "사업부별 기준수수료를 삭제 하시겠습니까?"))) {
            return;
        }

        rowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);
        // 신규 데이터일 경우 Grid 데이터만 삭제
        if (rowData.CRUD == $ND.C_DV_CRUD_C || rowData.CRUD == $ND.C_DV_CRUD_N) {
            $NC.deleteGridRowData(G_GRDMASTER, rowData);
        } else {
            rowData.CRUD = $ND.C_DV_CRUD_D;
            G_GRDMASTER.data.updateItem(rowData.id, rowData);
            _Save();
        }
    } else if (G_GRDDETAIL1.focused) {

        if (G_GRDDETAIL1.data.getLength() == 0 || $NC.isNull(G_GRDDETAIL1.lastRow)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.006", "삭제할 데이터가 없습니다."));
            return;
        }

        if (!confirm($NC.getDisplayMsg("JS.LFC03010E0.008", "보관유형별 수수료기준을 삭제 하시겠습니까?"))) {
            return;
        }

        rowData = G_GRDDETAIL1.data.getItem(G_GRDDETAIL1.lastRow);
        // 신규 데이터일 경우 Grid 데이터만 삭제
        if (rowData.CRUD == $ND.C_DV_CRUD_C || rowData.CRUD == $ND.C_DV_CRUD_N) {
            $NC.deleteGridRowData(G_GRDDETAIL1, rowData);
        } else {
            rowData.CRUD = $ND.C_DV_CRUD_D;
            G_GRDDETAIL1.data.updateItem(rowData.id, rowData);
            _Save();
        }
    } else if (G_GRDDETAIL2.focused) {

        if (G_GRDDETAIL2.data.getLength() == 0 || $NC.isNull(G_GRDDETAIL2.lastRow)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.006", "삭제할 데이터가 없습니다."));
            return;
        }

        if (!confirm($NC.getDisplayMsg("JS.LFC03010E0.009", "상품그룹별 수수료기준을 삭제 하시겠습니까?"))) {
            return;
        }

        rowData = G_GRDDETAIL2.data.getItem(G_GRDDETAIL2.lastRow);
        // 신규 데이터일 경우 Grid 데이터만 삭제
        if (rowData.CRUD == $ND.C_DV_CRUD_C || rowData.CRUD == $ND.C_DV_CRUD_N) {
            $NC.deleteGridRowData(G_GRDDETAIL2, rowData);
        } else {
            rowData.CRUD = $ND.C_DV_CRUD_D;
            G_GRDDETAIL2.data.updateItem(rowData.id, rowData);
            _Save();
        }
    } else {

        if (G_GRDDETAIL3.data.getLength() == 0 || $NC.isNull(G_GRDDETAIL3.lastRow)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.006", "삭제할 데이터가 없습니다."));
            return;
        }

        if (!confirm($NC.getDisplayMsg("JS.LFC03010E0.010", "상품별 수수료기준을 삭제 하시겠습니까?"))) {
            return;
        }

        rowData = G_GRDDETAIL3.data.getItem(G_GRDDETAIL3.lastRow);
        // 신규 데이터일 경우 Grid 데이터만 삭제
        if (rowData.CRUD == $ND.C_DV_CRUD_C || rowData.CRUD == $ND.C_DV_CRUD_N) {
            $NC.deleteGridRowData(G_GRDDETAIL3, rowData);
        } else {
            rowData.CRUD = $ND.C_DV_CRUD_D;
            G_GRDDETAIL3.data.updateItem(rowData.id, rowData);
            _Save();
        }
    }
}

/**
 * Cancel Button Event - 메인 상단 취소 버튼 클릭시 호출 됨
 */
function _Cancel() {

    var lastKeyVal1 = $NC.getGridLastKeyVal(G_GRDMASTER, {
        selectKey: [
            "CONTRACT_NO",
            "BILL_DIV",
            "CONTRACT_DATE"
        ],
        isCancel: true
    });
    var lastKeyVal2 = $NC.getGridLastKeyVal(G_GRDDETAIL1, {
        selectKey: "KEEP_DIV",
        isCancel: true
    });
    var lastKeyVal3 = $NC.getGridLastKeyVal(G_GRDDETAIL2, {
        selectKey: [
            "BRAND_CD",
            "DEPART_CD",
            "LINE_CD",
            "CLASS_CD"
        ],
        isCancel: true
    });
    var lastKeyVal4 = $NC.getGridLastKeyVal(G_GRDDETAIL3, {
        selectKey: [
            "BRAND_CD",
            "ITEM_CD"
        ],
        isCancel: true
    });
    _Inquiry();
    G_GRDMASTER.lastKeyVal = lastKeyVal1;
    G_GRDDETAIL1.lastKeyVal = lastKeyVal2;
    G_GRDDETAIL2.lastKeyVal = lastKeyVal3;
    G_GRDDETAIL3.lastKeyVal = lastKeyVal4;
}

/**
 * Print Button Event - 메인 상단 출력 버튼의 리스트 클릭시 호출 됨
 * 
 * @param {Object}
 *        reportInfo 선택한 레포트 정보
 * 
 * <pre style="font-family: GulimChe; font-size: 12px;">
 * PROGRAM_ID        : 프로그램ID         PROGRAM_SUB_CD    : 프로그램하위코드
 * REPORT_CD         : 레포트코드         REPORT_NM         : 레포트명
 * REPORT_TITLE_NM   : 레포트타이틀명
 * REPORT_DOC_CD     : 레포트문서코드     REPORT_DOC_URL    : 레포트문서URL
 * REPORT_QUERY_ID   : 레포트쿼리ID       INTERNAL_QUERY_YN : 내부쿼리사용여부
 * USE_YN            : 사용여부           SORT_RANK         : 정렬순서
 *        </pre>
 */
function _Print(reportInfo) {

}

function onChangingCondition() {

    // 전역 변수 값 초기화
    $NC.clearGridData(G_GRDMASTER);
    $NC.clearGridData(G_GRDDETAIL1);
    $NC.clearGridData(G_GRDDETAIL2);
    $NC.clearGridData(G_GRDDETAIL3);

    // 공통 버튼 초기화 - 조회 버튼만 활성
    $NC.setInitTopButtons();
}

function grdMasterOnGetColumns() {

    var columns = [];
    $NC.setGridColumn(columns, {
        id: "CONTRACT_NO_F",
        field: "CONTRACT_NO_F",
        name: "계약번호",
        editor: Slick.Editors.Popup,
        editorOptions: {
            onPopup: grdMasterOnPopup,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CUST_CD_F",
        field: "CUST_CD_F",
        name: "고객사"
    });
    $NC.setGridColumn(columns, {
        id: "BILL_DIV_F",
        field: "BILL_DIV_F",
        name: "비용구분"
    });
    $NC.setGridColumn(columns, {
        id: "BASIC_AMT",
        field: "BASIC_AMT",
        name: "기본금액",
        cssClass: "styRight",
        editor: Slick.Editors.Number,
        editorOptions: {
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_DIV_F",
        field: "UNIT_DIV_F",
        name: "단위구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "UNIT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.UNIT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_PRICE",
        field: "UNIT_PRICE",
        name: "기준단가",
        cssClass: "styRight",
        editor: Slick.Editors.Number,
        editorOptions: {
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_QTY_DIV_F",
        field: "CALC_QTY_DIV_F",
        name: "수량계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_QTY_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_QTY_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_AMT_DIV_F",
        field: "CALC_AMT_DIV_F",
        name: "금액계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_AMT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_AMT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CONTRACT_DATE",
        field: "CONTRACT_DATE",
        name: "계약시작일자",
        cssClass: "styCenter",
        editor: Slick.Editors.Date,
        editorOptions: {
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CONTRACT_END_DATE",
        field: "CONTRACT_END_DATE",
        name: "계약종료일자",
        cssClass: "styCenter"
    });
    $NC.setGridColumn(columns, {
        id: "REMARK1",
        field: "REMARK1",
        name: "비고",
        editor: Slick.Editors.Text
    });

    return $NC.setGridColumnDefaultFormatter(columns);
}

function grdMasterInitialize() {

    var options = {
        frozenColumn: 2,
        editable: true,
        autoEdit: true
    };

    // Grid Object, DataView 생성 및 초기화
    $NC.setInitGridObject("#grdMaster", {
        columns: grdMasterOnGetColumns(),
        queryId: "LFC03010E0.RS_MASTER",
        sortCol: "CONTRACT_NO",
        gridOptions: options
    });
    G_GRDMASTER.view.onSelectedRowsChanged.subscribe(grdMasterOnAfterScroll);
    G_GRDMASTER.view.onBeforeEditCell.subscribe(grdMasterOnBeforeEditCell);
    G_GRDMASTER.view.onCellChange.subscribe(grdMasterOnCellChange);
    G_GRDMASTER.view.onFocus.subscribe(grdMasterOnFocus);

    // 최초 조회시 포커스 처리
    G_GRDMASTER.focused = true;
}

function grdMasterOnFocus(e, args) {

    if (G_GRDMASTER.focused) {
        return;
    }
    G_GRDMASTER.focused = true;
    G_GRDDETAIL1.focused = false;
    G_GRDDETAIL2.focused = false;
    G_GRDDETAIL3.focused = false;

    // 보관유형별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL1)) {
        $NC.setFocusGrid(G_GRDDETAIL1, G_GRDDETAIL1.lastRow, "KEEP_DIV_F", true);
    }

    // 상품그룹별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL2)) {
        $NC.setFocusGrid(G_GRDDETAIL2, G_GRDDETAIL2.lastRow, "DEPART_CD_F", true);
    }

    // 상품별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL3)) {
        $NC.setFocusGrid(G_GRDDETAIL3, G_GRDDETAIL3.lastRow, "ITEM_CD", true);
    }
}

function grdMasterOnAfterScroll(e, args) {

    if (!$NC.isGridValidLastRow(G_GRDMASTER, args.rows, e)) {
        return;
    }
    var row = args.rows[0];
    var rowData = G_GRDMASTER.data.getItem(row);

    // 조회시 전역 변수 값 초기화
    $NC.setInitGridVar(G_GRDDETAIL3);
    $NC.setInitGridVar(G_GRDDETAIL2);
    $NC.setInitGridVar(G_GRDDETAIL1);

    if (rowData.CRUD == $ND.C_DV_CRUD_C || rowData.CRUD == $ND.C_DV_CRUD_N) {
        onGetDetail1({
            data: null
        });
        onGetDetail2({
            data: null
        });
        onGetDetail3({
            data: null
        });
    } else {
        /* 보관유형별 수수료 */
        // 파라메터 세팅
        G_GRDDETAIL1.queryParams = {
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE
        };
        // 데이터 조회
        $NC.serviceCall("/LFC03010E0/getDataSet.do", $NC.getGridParams(G_GRDDETAIL1), onGetDetail1);

        /* 상품그룹별 수수료 */
        // 파라메터 세팅
        G_GRDDETAIL2.queryParams = {
            P_CUST_CD: rowData.CUST_CD,
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE
        };
        // 데이터 조회
        $NC.serviceCall("/LFC03010E0/getDataSet.do", $NC.getGridParams(G_GRDDETAIL2), onGetDetail2);

        /* 상품별 수수료 */
        // 파라메터 세팅
        G_GRDDETAIL3.queryParams = {
            P_BILL_DIV: rowData.BILL_DIV,
            P_CONTRACT_NO: rowData.CONTRACT_NO,
            P_CONTRACT_DATE: rowData.CONTRACT_DATE
        };
        // 데이터 조회
        $NC.serviceCall("/LFC03010E0/getDataSet.do", $NC.getGridParams(G_GRDDETAIL3), onGetDetail3);
    }

    // 상단 현재로우/총건수 업데이트
    $NC.setGridDisplayRows(G_GRDMASTER, row + 1);
}

function grdMasterOnPopup(e, args) {

    switch (args.column.id) {
        case "CONTRACT_NO_F":
            $NP.showContractBillPopup({
                P_CONTRACT_NO: $ND.C_ALL,
                P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
                P_VIEW_DIV: "1"
            }, grdMasterOnContractBillPopup, function() {
                $NC.setFocusGrid(G_GRDMASTER, args.row, args.cell, true, true);
            });
            return;
    }
}

function grdMasterOnContractBillPopup(resultInfo) {

    var rowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);
    if ($NC.isNull(rowData)) {
        return;
    }

    var focusCol;
    if ($NC.isNotNull(resultInfo)) {
        rowData.CONTRACT_NO = resultInfo.CONTRACT_NO;
        rowData.CONTRACT_NM = resultInfo.CONTRACT_NM;
        rowData.CONTRACT_NO_F = resultInfo.CONTRACT_NO_F;
        rowData.BILL_DIV = resultInfo.BILL_DIV;
        rowData.BILL_DIV_D = resultInfo.BILL_DIV_D;
        rowData.BILL_DIV_F = resultInfo.BILL_DIV_F;
        rowData.CUST_CD_F = resultInfo.CUST_CD_F;

        focusCol = G_GRDMASTER.view.getColumnIndex("BASIC_AMT");
    } else {
        rowData.CONTRACT_NO = "";
        rowData.CONTRACT_NM = "";
        rowData.CONTRACT_NO_F = "";
        rowData.BILL_DIV = "";
        rowData.BILL_DIV_D = "";
        rowData.BILL_DIV_F = "";
        rowData.CUST_CD_F = "";

        focusCol = G_GRDMASTER.view.getColumnIndex("CONTRACT_NO_F");
    }

    // 마지막 선택 Row 수정 데이터 반영 및 상태 변경
    $NC.setGridApplyChange(G_GRDMASTER, rowData);

    $NC.setFocusGrid(G_GRDMASTER, G_GRDMASTER.lastRow, focusCol, true, true);
}

function grdMasterOnBeforeEditCell(e, args) {

    var rowData = args.item;
    // 신규 데이터일 때만 수정 가능한 컬럼
    var isNew = rowData.CRUD == $ND.C_DV_CRUD_N || rowData.CRUD == $ND.C_DV_CRUD_C;
    switch (args.column.id) {
        case "CONTRACT_NO_F":
        case "CONTRACT_DATE":
            return isNew;
        case "UNIT_DIV_F":
            return $NC.isNotNull(rowData.BILL_DIV);
    }
    return true;
}

function grdMasterOnCellChange(e, args) {

    var rowData = args.item;
    switch (G_GRDMASTER.view.getColumnId(args.cell)) {
        case "CONTRACT_NO_F":
            $NP.onContractBillChange(rowData.CONTRACT_NO_F, {
                P_CONTRACT_NO: rowData.CONTRACT_NO_F,
                P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
                P_VIEW_DIV: "1"
            }, grdMasterOnContractBillPopup);
            return;
        case "CONTRACT_DATE":
            if ($NC.isNotNull(rowData.CONTRACT_DATE)) {
                if (!$NC.isDate(rowData.CONTRACT_DATE)) {
                    alert($NC.getDisplayMsg("JS.LFC03010E0.011", "계약시작일자를 정확히 입력하십시오."));
                    rowData.CONTRACT_DATE = "";
                    $NC.setFocusGrid(G_GRDMASTER, args.row, args.cell, true);
                } else {
                    rowData.CONTRACT_DATE = $NC.getFirstDate(rowData.CONTRACT_DATE);
                }
            }
            break;
    }

    // 마지막 선택 Row 수정 데이터 반영 및 상태 변경
    $NC.setGridApplyChange(G_GRDMASTER, rowData);
}

function grdMasterOnNewRecord(args) {

    $NC.setFocusGrid(G_GRDMASTER, args.row, "CONTRACT_NO_F", true);
}

function grdMasterOnBeforePost(row) {

    // Validation 대상인지 체크, 아니면 True로 리턴
    if (!$NC.isGridValidPostRow(G_GRDMASTER, row, [
        "CONTRACT_NO",
        "BILL_DIV",
        "CONTRACT_DATE"
    ])) {
        return true;
    }

    var rowData = G_GRDMASTER.data.getItem(row);
    if (rowData.CRUD != $ND.C_DV_CRUD_R) {
        if ($NC.isNull(rowData.CONTRACT_NO)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.012", "계약번호를 선택하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "CONTRACT_NO_F", true);
            return false;
        }
        if ($NC.isNull(rowData.BASIC_AMT)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.014", "기본금액을 입력하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "BASIC_AMT", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.015", "단위구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "UNIT_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_PRICE)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.016", "기준단가를 입력하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "UNIT_PRICE", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_QTY_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.017", "수량계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "CALC_QTY_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_AMT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.018", "금액계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "CALC_AMT_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.CONTRACT_DATE)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.013", "계약시작일자을 선택하십시오."));
            $NC.setFocusGrid(G_GRDMASTER, row, "CONTRACT_DATE", true);
            return false;
        }
    }

    // 신규 데이터 업데이트, N -> C
    $NC.setGridApplyPost(G_GRDMASTER, rowData);
    return true;
}

function grdDetail1OnGetColumns() {

    var columns = [];
    $NC.setGridColumn(columns, {
        id: "KEEP_DIV_F",
        field: "KEEP_DIV_F",
        name: "보관구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "KEEP_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.KEEP_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_DIV_F",
        field: "UNIT_DIV_F",
        name: "단위구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "UNIT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.UNIT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_PRICE",
        field: "UNIT_PRICE",
        name: "기준단가",
        cssClass: "styRight",
        editor: Slick.Editors.Number,
        editorOptions: {
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_QTY_DIV_F",
        field: "CALC_QTY_DIV_F",
        name: "수량계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_QTY_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_QTY_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_AMT_DIV_F",
        field: "CALC_AMT_DIV_F",
        name: "금액계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_AMT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_AMT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "REMARK1",
        field: "REMARK1",
        name: "비고",
        editor: Slick.Editors.Text
    });

    return $NC.setGridColumnDefaultFormatter(columns);
}

function grdDetail1Initialize() {

    var options = {
        editable: true,
        autoEdit: true,
        frozenColumn: 0
    };

    // Grid Object, DataView 생성 및 초기화
    $NC.setInitGridObject("#grdDetail1", {
        columns: grdDetail1OnGetColumns(),
        queryId: "LFC03010E0.RS_DETAIL1",
        sortCol: "KEEP_DIV_F",
        gridOptions: options
    });
    G_GRDDETAIL1.view.onSelectedRowsChanged.subscribe(grdDetail1OnAfterScroll);
    G_GRDDETAIL1.view.onBeforeEditCell.subscribe(grdDetail1OnBeforeEditCell);
    G_GRDDETAIL1.view.onCellChange.subscribe(grdDetail1OnCellChange);
    G_GRDDETAIL1.view.onFocus.subscribe(grdDetail1OnFocus);
}

function grdDetail1OnFocus(e, args) {

    if (G_GRDDETAIL1.focused) {
        return;
    }
    G_GRDMASTER.focused = false;
    G_GRDDETAIL1.focused = true;
    G_GRDDETAIL2.focused = false;
    G_GRDDETAIL3.focused = false;

    // 기준 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDMASTER)) {
        return;
    }

    // 상품그룹별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL2)) {
        return;
    }

    // 상품별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL3)) {
        return;
    }
}

function grdDetail1OnAfterScroll(e, args) {

    if (!$NC.isGridValidLastRow(G_GRDDETAIL1, args.rows, e)) {
        return;
    }
    var row = args.rows[0];

    // 상단 현재로우/총건수 업데이트
    $NC.setGridDisplayRows(G_GRDDETAIL1, row + 1);
}

function grdDetail1OnBeforeEditCell(e, args) {

    var rowData = args.item;
    // 신규 데이터일 때만 수정 가능한 컬럼
    if (rowData.CRUD != $ND.C_DV_CRUD_N && rowData.CRUD != $ND.C_DV_CRUD_C) {
        switch (args.column.id) {
            case "KEEP_DIV_F":
                return false;
        }
    }
    return true;
}

function grdDetail1OnCellChange(e, args) {

    var rowData = args.item;

    // 마지막 선택 Row 수정 데이터 반영 및 상태 변경
    $NC.setGridApplyChange(G_GRDDETAIL1, rowData);
}

function grdDetail1OnNewRecord(args) {

    $NC.setFocusGrid(G_GRDDETAIL1, args.row, "KEEP_DIV_F", true);
}

function grdDetail1OnBeforePost(row) {

    // Validation 대상인지 체크, 아니면 True로 리턴
    if (!$NC.isGridValidPostRow(G_GRDDETAIL1, row, "KEEP_DIV")) {
        return true;
    }

    var rowData = G_GRDDETAIL1.data.getItem(row);
    if (rowData.CRUD != $ND.C_DV_CRUD_R) {
        if ($NC.isNull(rowData.KEEP_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.019", "보관구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL1, row, "KEEP_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.015", "단위구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL1, row, "UNIT_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_PRICE)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.016", "기준단가를 입력하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL1, row, "UNIT_PRICE", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_QTY_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.017", "수량계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL1, row, "CALC_QTY_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_AMT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.018", "금액계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL1, row, "CALC_AMT_DIV_F", true);
            return false;
        }
    }

    // 신규 데이터 업데이트, N -> C
    $NC.setGridApplyPost(G_GRDDETAIL1, rowData);
    return true;
}

function grdDetail2OnGetColumns() {

    var columns = [];
    $NC.setGridColumn(columns, {
        id: "DEPART_CD_F",
        field: "DEPART_CD_F",
        name: "대분류",
        editor: Slick.Editors.ComboBox
    });
    $NC.setGridColumn(columns, {
        id: "LINE_CD_F",
        field: "LINE_CD_F",
        name: "중분류",
        editor: Slick.Editors.ComboBox
    });
    $NC.setGridColumn(columns, {
        id: "CLASS_CD_F",
        field: "CLASS_CD_F",
        name: "소분류",
        editor: Slick.Editors.ComboBox
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_DIV_F",
        field: "UNIT_DIV_F",
        name: "단위구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "UNIT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.UNIT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_PRICE",
        field: "UNIT_PRICE",
        name: "기준단가",
        cssClass: "styRight",
        editor: Slick.Editors.Number,
        editorOptions: {
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_QTY_DIV_F",
        field: "CALC_QTY_DIV_F",
        name: "수량계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_QTY_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_QTY_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_AMT_DIV_F",
        field: "CALC_AMT_DIV_F",
        name: "금액계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_AMT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_AMT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "REMARK1",
        field: "REMARK1",
        name: "비고",
        editor: Slick.Editors.Text
    });

    return $NC.setGridColumnDefaultFormatter(columns);
}

function grdDetail2Initialize() {

    var options = {
        editable: true,
        autoEdit: true,
        frozenColumn: 0
    };

    // Grid Object, DataView 생성 및 초기화
    $NC.setInitGridObject("#grdDetail2", {
        columns: grdDetail2OnGetColumns(),
        queryId: "LFC03010E0.RS_DETAIL2",
        sortCol: "DEPART_CD_F",
        gridOptions: options
    });
    G_GRDDETAIL2.view.onSelectedRowsChanged.subscribe(grdDetail2OnAfterScroll);
    G_GRDDETAIL2.view.onBeforeEditCell.subscribe(grdDetail2OnBeforeEditCell);
    G_GRDDETAIL2.view.onCellChange.subscribe(grdDetail2OnCellChange);
    G_GRDDETAIL2.view.onFocus.subscribe(grdDetail2OnFocus);
}

function grdDetail2OnFocus(e, args) {

    if (G_GRDDETAIL2.focused) {
        return;
    }
    G_GRDMASTER.focused = false;
    G_GRDDETAIL1.focused = false;
    G_GRDDETAIL2.focused = true;
    G_GRDDETAIL3.focused = false;

    // 기준 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDMASTER)) {
        return;
    }

    // 보관유형별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL1)) {
        return;
    }

    // 상품별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL3)) {
        return;
    }
}

function grdDetail2OnAfterScroll(e, args) {

    if (!$NC.isGridValidLastRow(G_GRDDETAIL2, args.rows, e)) {
        return;
    }
    var row = args.rows[0];
    var refRowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);

    // 상품그룹 대분류
    $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
        P_QUERY_ID: "WC.POP_ITEMGROUP_DEPART",
        P_QUERY_PARAMS: {
            P_CUST_CD: refRowData.CUST_CD
        }
    }, function(ajaxData) {
        var dsResult = $NC.toArray(ajaxData);
        // 디테일2 그리드 콤보박스 초기화
        var columns = G_GRDDETAIL2.view.getColumns();
        columns[G_GRDDETAIL2.view.getColumnIndex("DEPART_CD_F")].editorOptions = {
            codeField: "DEPART_CD",
            dataCodeField: "DEPART_CD",
            dataFullNameField: "DEPART_CD_F",
            data: dsResult,
            isKeyField: true
        };
        G_GRDDETAIL2.view.setColumns(columns);
    });

    // 상단 현재로우/총건수 업데이트
    $NC.setGridDisplayRows(G_GRDDETAIL2, row + 1);
}

function grdDetail2OnBeforeEditCell(e, args) {

    var rowData = args.item;
    // 신규 데이터일 때만 수정 가능한 컬럼
    var isNew = rowData.CRUD == $ND.C_DV_CRUD_N || rowData.CRUD == $ND.C_DV_CRUD_C;
    switch (args.column.id) {
        case "BRAND_CD":
        case "DEPART_CD_F":
            return isNew;
        case "LINE_CD_F":
            return isNew && $NC.isNotNull(rowData.DEPART_CD);
        case "CLASS_CD_F":
            return isNew && $NC.isNotNull(rowData.LINE_CD);
    }
    return true;
}

function grdDetail2OnCellChange(e, args) {

    var rowData = args.item;
    var refRowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);

    switch (G_GRDDETAIL2.view.getColumnId(args.cell)) {
        case "DEPART_CD_F":
            rowData.LINE_CD = null;
            rowData.LINE_CD_F = null;
            rowData.CLASS_CD = null;
            rowData.CLASS_CD_F = null;

            // 상품그룹 중분류
            $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
                P_QUERY_ID: "WC.POP_ITEMGROUP_LINE",
                P_QUERY_PARAMS: {
                    P_CUST_CD: refRowData.CUST_CD,
                    P_DEPART_CD: rowData.DEPART_CD
                }
            }, function(ajaxData) {
                // 디테일2 그리드 콤보박스 초기화
                var columns = G_GRDDETAIL2.view.getColumns();
                columns[G_GRDDETAIL2.view.getColumnIndex("LINE_CD_F")].editorOptions = {
                    codeField: "LINE_CD",
                    dataCodeField: "LINE_CD",
                    dataFullNameField: "LINE_CD_F",
                    data: $NC.toArray(ajaxData),
                    addEmpty: true
                };
                G_GRDDETAIL2.view.setColumns(columns);
                $NC.setFocusGrid(G_GRDDETAIL2, args.row, "LINE_CD_F", true);
            });
            break;
        case "LINE_CD_F":
            rowData.CLASS_CD = null;
            rowData.CLASS_CD_F = null;

            // 상품그룹 소분류
            $NC.serviceCallAndWait("/LFC03010E0/getDataSet.do", {
                P_QUERY_ID: "WC.POP_ITEMGROUP_CLASS",
                P_QUERY_PARAMS: {
                    P_CUST_CD: refRowData.CUST_CD,
                    P_DEPART_CD: rowData.DEPART_CD,
                    P_LINE_CD: rowData.LINE_CD
                }
            }, function(ajaxData) {
                // 디테일2 그리드 콤보박스 초기화
                var columns = G_GRDDETAIL2.view.getColumns();
                columns[G_GRDDETAIL2.view.getColumnIndex("CLASS_CD_F")].editorOptions = {
                    codeField: "CLASS_CD",
                    dataCodeField: "CLASS_CD",
                    dataFullNameField: "CLASS_CD_F",
                    data: $NC.toArray(ajaxData),
                    addEmpty: true
                };
                G_GRDDETAIL2.view.setColumns(columns);
                $NC.setFocusGrid(G_GRDDETAIL2, args.row, "CLASS_CD_F", true);
            });
            break;
    }

    // 마지막 선택 Row 수정 데이터 반영 및 상태 변경
    $NC.setGridApplyChange(G_GRDDETAIL2, rowData);
}

function grdDetail2OnNewRecord(args) {

    $NC.setFocusGrid(G_GRDDETAIL2, args.row, "DEPART_CD_F", true);
}

function grdDetail2OnBeforePost(row) {

    // Validation 대상인지 체크, 아니면 True로 리턴
    if (!$NC.isGridValidPostRow(G_GRDDETAIL2, row, "DEPART_CD")) {
        return true;
    }

    var rowData = G_GRDDETAIL2.data.getItem(row);
    // 일반항목 체크
    if (rowData.CRUD != $ND.C_DV_CRUD_R) {
        if ($NC.isNull(rowData.DEPART_CD)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.020", "상품그룹 대분류를 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL2, row, "DEPART_CD_F", true);
            return false;
        }
        if ($NC.isNull(rowData.LINE_CD)) {
            rowData.LINE_CD = $ND.C_BASE_LINE_CD;
        }
        if ($NC.isNull(rowData.CLASS_CD)) {
            rowData.CLASS_CD = $ND.C_BASE_CLASS_CD;
        }
        if ($NC.isNull(rowData.UNIT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.015", "단위구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL2, row, "UNIT_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_PRICE)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.016", "기준단가를 입력하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL2, row, "UNIT_PRICE", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_QTY_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.017", "수량계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL2, row, "CALC_QTY_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_AMT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.018", "금액계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL2, row, "CALC_AMT_DIV_F", true);
            return false;
        }
    }

    // 신규 데이터 업데이트, N -> C
    $NC.setGridApplyPost(G_GRDDETAIL2, rowData);
    return true;
}

function grdDetail3OnGetColumns() {

    var columns = [];
    $NC.setGridColumn(columns, {
        id: "ITEM_CD",
        field: "ITEM_CD",
        name: "상품코드",
        editor: Slick.Editors.Popup,
        editorOptions: {
            onPopup: grdDetail3OnPopup,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "ITEM_BAR_CD",
        field: "ITEM_BAR_CD",
        name: "상품바코드"
    });
    $NC.setGridColumn(columns, {
        id: "ITEM_NM",
        field: "ITEM_NM",
        name: "상품명"
    });
    $NC.setGridColumn(columns, {
        id: "ITEM_SPEC",
        field: "ITEM_SPEC",
        name: "상품규격"
    });
    $NC.setGridColumn(columns, {
        id: "BRAND_NM",
        field: "BRAND_NM",
        name: "브랜드명"
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_DIV_F",
        field: "UNIT_DIV_F",
        name: "단위구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "UNIT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.UNIT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "UNIT_PRICE",
        field: "UNIT_PRICE",
        name: "기준단가",
        cssClass: "styRight",
        editor: Slick.Editors.Number,
        editorOptions: {
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_QTY_DIV_F",
        field: "CALC_QTY_DIV_F",
        name: "수량계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_QTY_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_QTY_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "CALC_AMT_DIV_F",
        field: "CALC_AMT_DIV_F",
        name: "금액계산구분",
        editor: Slick.Editors.ComboBox,
        editorOptions: {
            codeField: "CALC_AMT_DIV",
            dataCodeField: "COMMON_CD",
            dataFullNameField: "COMMON_CD_F",
            data: $NC.G_VAR.CALC_AMT_DIV,
            isKeyField: true
        }
    });
    $NC.setGridColumn(columns, {
        id: "REMARK1",
        field: "REMARK1",
        name: "비고",
        editor: Slick.Editors.Text
    });

    return $NC.setGridColumnDefaultFormatter(columns);
}

function grdDetail3Initialize() {

    var options = {
        editable: true,
        autoEdit: true,
        frozenColumn: 0
    };

    // Grid Object, DataView 생성 및 초기화
    $NC.setInitGridObject("#grdDetail3", {
        columns: grdDetail3OnGetColumns(),
        queryId: "LFC03010E0.RS_DETAIL3",
        sortCol: "ITEM_CD",
        gridOptions: options
    });
    G_GRDDETAIL3.view.onSelectedRowsChanged.subscribe(grdDetail3OnAfterScroll);
    G_GRDDETAIL3.view.onBeforeEditCell.subscribe(grdDetail3OnBeforeEditCell);
    G_GRDDETAIL3.view.onCellChange.subscribe(grdDetail3OnCellChange);
    G_GRDDETAIL3.view.onFocus.subscribe(grdDetail3OnFocus);
}

function grdDetail3OnFocus(e, args) {

    if (G_GRDDETAIL3.focused) {
        return;
    }
    G_GRDMASTER.focused = false;
    G_GRDDETAIL1.focused = false;
    G_GRDDETAIL2.focused = false;
    G_GRDDETAIL3.focused = true;

    // 기준 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDMASTER)) {
        return;
    }

    // 보관유형별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL1)) {
        return;
    }

    // 상품그룹별 수수료 Post 처리
    if (!$NC.isGridValidLastRow(G_GRDDETAIL2)) {
        return;
    }
}

function grdDetail3OnAfterScroll(e, args) {

    if (!$NC.isGridValidLastRow(G_GRDDETAIL3, args.rows, e)) {
        return;
    }
    var row = args.rows[0];

    // 상단 현재로우/총건수 업데이트
    $NC.setGridDisplayRows(G_GRDDETAIL3, row + 1);
}

function grdDetail3OnBeforeEditCell(e, args) {

    var rowData = args.item;
    // 신규 데이터일 때만 수정 가능한 컬럼
    if (rowData.CRUD != $ND.C_DV_CRUD_N && rowData.CRUD != $ND.C_DV_CRUD_C) {
        switch (args.column.id) {
            case "ITEM_CD":
                return false;
        }
    }
    return true;
}

function grdDetail3OnCellChange(e, args) {

    var rowData = args.item;
    var refRowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);
    switch (G_GRDDETAIL3.view.getColumnId(args.cell)) {
        case "ITEM_CD":
            $NP.onItemChange(rowData.ITEM_CD, {
                P_CUST_CD: refRowData.CUST_CD,
                P_ITEM_CD: rowData.ITEM_CD,
                P_VIEW_DIV: "1",
                P_DEPART_CD: $ND.C_ALL,
                P_LINE_CD: $ND.C_ALL,
                P_CLASS_CD: $ND.C_ALL
            }, grdDetail3OnItemPopup, {
                queryId: "WC.POP_CMCUSTITEM"
            });
            return;
    }

    // 마지막 선택 Row 수정 데이터 반영 및 상태 변경
    $NC.setGridApplyChange(G_GRDDETAIL3, rowData);
}

function grdDetail3OnNewRecord(args) {

    $NC.setFocusGrid(G_GRDDETAIL3, args.row, "ITEM_CD", true);
}

function grdDetail3OnBeforePost(row) {

    // Validation 대상인지 체크, 아니면 True로 리턴
    if (!$NC.isGridValidPostRow(G_GRDDETAIL3, row, "ITEM_CD")) {
        return true;
    }

    var rowData = G_GRDDETAIL3.data.getItem(row);
    if (rowData.CRUD != $ND.C_DV_CRUD_R) {
        if ($NC.isNull(rowData.ITEM_NM)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.021", "상품코드를 입력하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL3, row, "ITEM_CD", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.015", "단위구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL3, row, "UNIT_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.UNIT_PRICE)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.016", "기준단가를 입력하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL3, row, "UNIT_PRICE", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_QTY_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.017", "수량계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL3, row, "CALC_QTY_DIV_F", true);
            return false;
        }
        if ($NC.isNull(rowData.CALC_AMT_DIV)) {
            alert($NC.getDisplayMsg("JS.LFC03010E0.018", "금액계산구분을 선택하십시오."));
            $NC.setFocusGrid(G_GRDDETAIL3, row, "CALC_AMT_DIV_F", true);
            return false;
        }
    }

    // 신규 데이터 업데이트, N -> C
    $NC.setGridApplyPost(G_GRDDETAIL3, rowData);
    return true;
}

/**
 * 검색조건의 계약번호 검색 이미지 클릭
 */
function showContractPopup() {

    $NP.showContractPopup({
        P_CONTRACT_NO: $ND.C_ALL,
        P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
        P_VIEW_DIV: "2" // 1:등록팝업, 2:조회팝업
    }, onContractPopup, function() {
        $NC.setFocus("#edtQContract_No", true);
    });
}

function onContractPopup(resultInfo) {

    if ($NC.isNotNull(resultInfo)) {
        $NC.setValue("#edtQContract_No", resultInfo.CONTRACT_NO);
        $NC.setValue("#edtQContract_Nm", resultInfo.CONTRACT_NM);
    } else {
        $NC.setValue("#edtQContract_No");
        $NC.setValue("#edtQContract_Nm");
        $NC.setFocus("#edtQContract_No", true);
    }

    onChangingCondition();
}

/**
 * 검색조건의 비용구분 검색 이미지 클릭
 */
function showBillPopup() {

    var CONTRACT_NO = $NC.getValue("#edtQContract_No", true);

    $NP.showBillPopup({
        P_CONTRACT_NO: CONTRACT_NO,
        P_BILL_DIV: $ND.C_ALL,
        P_PRICE_DIV: $NC.G_VAR.PRICE_DIV,
        P_VIEW_DIV: "2" // 1:등록팝업, 2:조회팝업
    }, onBillPopup, function() {
        $NC.setFocus("#edtQBill_Div", true);
    });
}

function onBillPopup(resultInfo) {

    if ($NC.isNotNull(resultInfo)) {
        $NC.setValue("#edtQBill_Div", resultInfo.BILL_DIV);
        $NC.setValue("#edtQBill_Div_D", resultInfo.BILL_DIV_D);
    } else {
        $NC.setValue("#edtQBill_Div");
        $NC.setValue("#edtQBill_Div_D");
        $NC.setFocus("#edtQBill_Div", true);
    }

    onChangingCondition();
}

/**
 * 그리드의 상품 팝업 처리
 */
function grdDetail3OnPopup(e, args) {

    // var rowData = args.item;
    var refRowData = G_GRDMASTER.data.getItem(G_GRDMASTER.lastRow);
    switch (args.column.id) {
        case "ITEM_CD":
            $NP.showItemPopup({
                queryId: "WC.POP_CMCUSTITEM",
                queryParams: {
                    P_CUST_CD: refRowData.CUST_CD,
                    P_ITEM_CD: $ND.C_ALL,
                    P_VIEW_DIV: "1",
                    P_DEPART_CD: $ND.C_ALL,
                    P_LINE_CD: $ND.C_ALL,
                    P_CLASS_CD: $ND.C_ALL
                }
            }, grdDetail3OnItemPopup, function() {
                $NC.setFocusGrid(G_GRDDETAIL3, args.row, args.cell, true, true);
            });
            break;
    }
}

function grdDetail3OnItemPopup(resultInfo) {

    var rowData = G_GRDDETAIL3.data.getItem(G_GRDDETAIL3.lastRow);
    if ($NC.isNull(rowData)) {
        return;
    }

    var focusCol;
    if ($NC.isNotNull(resultInfo)) {
        rowData.ITEM_CD = resultInfo.ITEM_CD;
        rowData.ITEM_NM = resultInfo.ITEM_NM;
        rowData.ITEM_SPEC = resultInfo.ITEM_SPEC;
        rowData.ITEM_BAR_CD = resultInfo.ITEM_BAR_CD;

        rowData.BRAND_CD = resultInfo.BRAND_CD;
        rowData.BRAND_NM = resultInfo.BRAND_NM;

        focusCol = G_GRDDETAIL3.view.getColumnIndex("UNIT_DIV_F");
    } else {
        rowData.ITEM_CD = "";
        rowData.ITEM_NM = "";
        rowData.ITEM_SPEC = "";
        rowData.ITEM_BAR_CD = "";

        rowData.BRAND_CD = "";
        rowData.BRAND_NM = "";

        focusCol = G_GRDDETAIL3.view.getColumnIndex("ITEM_CD");
    }

    // 마지막 선택 Row 수정 데이터 반영 및 상태 변경
    $NC.setGridApplyChange(G_GRDDETAIL3, rowData);

    $NC.setFocusGrid(G_GRDDETAIL3, G_GRDDETAIL3.lastRow, focusCol, true, true);
}

function onGetMaster(ajaxData) {

    $NC.setInitGridData(G_GRDMASTER, ajaxData);
    if (!$NC.setInitGridAfterOpen(G_GRDMASTER, [
        "CONTRACT_NO",
        "BILL_DIV",
        "CONTRACT_DATE"
    ], G_GRDMASTER.focused)) {
        // 전역 변수 값 초기화
        $NC.setInitGridVar(G_GRDDETAIL1);
        onGetDetail1({
            data: null
        });
        $NC.setInitGridVar(G_GRDDETAIL2);
        onGetDetail2({
            data: null
        });
        $NC.setInitGridVar(G_GRDDETAIL3);
        onGetDetail3({
            data: null
        });
    }

    // 공통 버튼 활성화 처리
    $NC.G_VAR.buttons._inquiry = "1";
    $NC.G_VAR.buttons._new = "1";
    $NC.G_VAR.buttons._save = "1";
    $NC.G_VAR.buttons._cancel = "1";
    $NC.G_VAR.buttons._delete = "1";
    $NC.G_VAR.buttons._print = "0";
    $NC.setInitTopButtons($NC.G_VAR.buttons);
}

function onGetDetail1(ajaxData) {

    $NC.setInitGridData(G_GRDDETAIL1, ajaxData);
    $NC.setInitGridAfterOpen(G_GRDDETAIL1, "KEEP_DIV", G_GRDDETAIL1.focused);
}

function onGetDetail2(ajaxData) {

    $NC.setInitGridData(G_GRDDETAIL2, ajaxData);
    $NC.setInitGridAfterOpen(G_GRDDETAIL2, [
        "BRAND_CD",
        "DEPART_CD",
        "LINE_CD",
        "CLASS_CD"
    ], G_GRDDETAIL2.focused);
}

function onGetDetail3(ajaxData) {

    $NC.setInitGridData(G_GRDDETAIL3, ajaxData);
    $NC.setInitGridAfterOpen(G_GRDDETAIL3, [
        "BRAND_CD",
        "ITEM_CD"
    ], G_GRDDETAIL3.focused);
}

function onSave(ajaxData) {

    var lastKeyVal1 = $NC.getGridLastKeyVal(G_GRDMASTER, {
        selectKey: [
            "CONTRACT_NO",
            "BILL_DIV",
            "CONTRACT_DATE"
        ]
    });
    var lastKeyVal2 = $NC.getGridLastKeyVal(G_GRDDETAIL1, {
        selectKey: "KEEP_DIV"
    });
    var lastKeyVal3 = $NC.getGridLastKeyVal(G_GRDDETAIL2, {
        selectKey: [
            "BRAND_CD",
            "DEPART_CD",
            "LINE_CD",
            "CLASS_CD"
        ]
    });
    var lastKeyVal4 = $NC.getGridLastKeyVal(G_GRDDETAIL3, {
        selectKey: [
            "BRAND_CD",
            "ITEM_CD"
        ]
    });
    _Inquiry();
    G_GRDMASTER.lastKeyVal = lastKeyVal1;
    G_GRDDETAIL1.lastKeyVal = lastKeyVal2;
    G_GRDDETAIL2.lastKeyVal = lastKeyVal3;
    G_GRDDETAIL3.lastKeyVal = lastKeyVal4;
}

function onSaveError(ajaxData) {

    $NC.onError(ajaxData);

    var grdObject;
    if (G_GRDMASTER.focused) {
        grdObject = G_GRDMASTER;
    } else if (G_GRDDETAIL1.focused) {
        grdObject = G_GRDDETAIL1;
    } else if (G_GRDDETAIL2.focused) {
        grdObject = G_GRDDETAIL2;
    } else {
        grdObject = G_GRDDETAIL3;
    }

    var rowData = grdObject.data.getItem(grdObject.lastRow);
    if ($NC.isNull(rowData)) {
        return;
    }
    if (rowData.CRUD == $ND.C_DV_CRUD_D) {
        // 마지막 선택 Row 수정 데이터 반영 및 상태 강제 변경
        $NC.setGridApplyChange(grdObject, rowData, true);
    }
}