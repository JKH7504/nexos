<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!--
  //====================================================================================================================
  // WMS Interface 관련 Package
  // Author : ASETEC
  // Date : 2023-05-26
  // Description
  // WMS Interface 관련 Package Mapper
  //
  // ※ 작성은 반드시 알파벳 순서로 작성
  // ※ Mapper 파일은 [destination name]_package_sqlmap.xml 으로 생성
  // ※ Mapper namespace는 destination name 으로 설정
  //====================================================================================================================
  -->
  <!--
  cache         - 해당 네임스페이스을 위한 캐시 설정
  cache-ref     - 다른 네임스페이스의 캐시 설정에 대한 참조
  resultMap     - 데이터베이스 결과데이터를 객체에 로드하는 방법을 정의하는 엘리먼트
  parameterMap  - 비권장됨! 예전에 파라미터를 매핑하기 위해 사용되었으나 현재는 사용하지 않음
  sql           - 다른 구문에서 재사용하기 위한 SQL 조각
  insert        - 매핑된 INSERT 구문.
  update        - 매핑된 UPDATE 구문.
  delete        - 매핑된 DELEETE 구문.
  select        - 매핑된 SELECT 구문.
  //====================================================================================================================
  // ※ neXos Framework는 Vo를 사용하지 않음, HashMap만 사용 함
  //====================================================================================================================
  SELECT WS.GET_PACKAGE_MAPPER('WI' ,NULL ,NULL) AS SQLMAP_TEXT
    FROM DUAL;
  //====================================================================================================================
  // ※ Package 호출 관련 Mapper의 Namespace는 "Package명" 으로 처리
  //====================================================================================================================
  -->
<mapper namespace="WI">
  <!--
  //====================================================================================================================
  // SELECT SQLMAP
  //====================================================================================================================
  -->
  <!-- myBatis로 처리시 CURSOR를 리턴 받기 위해 resultMap 정의(컬럼 정의는 하지 않음) -->
  <!-- 네이스페이스(namespace) + _VIRTUALMAP 으로 resultMap 정의 -->
  <resultMap id="WI_VIRTUALMAP" type="hashmap"></resultMap>

  <!-- [S] - WI.ER_ERROR_PROCESSING -->
  <select id="ER_ERROR_PROCESSING" statementType="CALLABLE" parameterType="hashmap">
    {  #{O_RESULT_DS               ,mode=OUT   ,jdbcType=CURSOR     ,javaType=ResultSet  ,resultMap=WI_VIRTUALMAP} = call WI.ER_ERROR_PROCESSING
      (#{P_BU_CD                   ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_EDI_DIV                 ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_DEFINE_NO               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_RECV_DATE               ,mode=IN    ,jdbcType=TIMESTAMP  ,javaType=Date      }
      ,#{P_RECV_NO                 ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_PROCESS_CD              ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_ERROR_MSG               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_USER_ID                 ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_MSG                     ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    })
    }
  </select>
  <!-- [E] - WI.ER_ERROR_PROCESSING -->


  <!--
  //====================================================================================================================
  // PROCEDURE SQLMAP
  //====================================================================================================================
  -->
  <!-- [S] - WI.GET_EM_IFRESULT_COL -->
  <select id="GET_EM_IFRESULT_COL" statementType="CALLABLE" parameterType="hashmap">
    {  #{O_RESULT                  ,mode=OUT   ,jdbcType=NUMERIC    ,javaType=BigDecimal} = call WI.GET_EM_IFRESULT_COL
      (#{P_COLUMNS                 ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_COLUMN_NM               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    })
    }
  </select>
  <!-- [E] - WI.GET_EM_IFRESULT_COL -->


  <!-- [S] - WI.GET_ERROR_MESSAGE -->
  <select id="GET_ERROR_MESSAGE" statementType="CALLABLE" parameterType="hashmap">
    {  call WI.GET_ERROR_MESSAGE
      (#{P_BU_CD                   ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_EDI_DIV                 ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_DEFINE_NO               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_EDI_DATE                ,mode=IN    ,jdbcType=TIMESTAMP  ,javaType=Date      }
      ,#{P_EDI_NO                  ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_MSG                     ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    })
    }
  </select>
  <!-- [E] - WI.GET_ERROR_MESSAGE -->


  <!-- [S] - WI.GET_SEND_UPDATE_INFO -->
  <select id="GET_SEND_UPDATE_INFO" statementType="CALLABLE" parameterType="hashmap">
    {  call WI.GET_SEND_UPDATE_INFO
      (#{P_EDI_DIV                 ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_T_TABLE_NM              ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_T_PROC_UNIT_COLS        ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_T_UPDATE_COLS           ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_ES_PROC_UNIT_COLS       ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{O_MSG                     ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    })
    }
  </select>
  <!-- [E] - WI.GET_SEND_UPDATE_INFO -->


  <!-- [S] - WI.VAL_TO_CHAR -->
  <select id="VAL_TO_CHAR" statementType="CALLABLE" parameterType="hashmap">
    {  #{O_RESULT                  ,mode=OUT   ,jdbcType=VARCHAR    ,javaType=String    } = call WI.VAL_TO_CHAR
      (#{P_EXIST_YN                ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_DEFAULT_YN              ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_NEW_VALUE               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_OLD_VALUE               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    })
    }
  </select>
  <!-- [E] - WI.VAL_TO_CHAR -->


  <!-- [S] - WI.VAL_TO_DATE -->
  <select id="VAL_TO_DATE" statementType="CALLABLE" parameterType="hashmap">
    {  #{O_RESULT                  ,mode=OUT   ,jdbcType=TIMESTAMP  ,javaType=Date      } = call WI.VAL_TO_DATE
      (#{P_EXIST_YN                ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_DEFAULT_YN              ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_NEW_VALUE               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_OLD_VALUE               ,mode=IN    ,jdbcType=TIMESTAMP  ,javaType=Date      })
    }
  </select>
  <!-- [E] - WI.VAL_TO_DATE -->


  <!-- [S] - WI.VAL_TO_NUMBER -->
  <select id="VAL_TO_NUMBER" statementType="CALLABLE" parameterType="hashmap">
    {  #{O_RESULT                  ,mode=OUT   ,jdbcType=NUMERIC    ,javaType=BigDecimal} = call WI.VAL_TO_NUMBER
      (#{P_EXIST_YN                ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_DEFAULT_YN              ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_NEW_VALUE               ,mode=IN    ,jdbcType=VARCHAR    ,javaType=String    }
      ,#{P_OLD_VALUE               ,mode=IN    ,jdbcType=NUMERIC    ,javaType=BigDecimal})
    }
  </select>
  <!-- [E] - WI.VAL_TO_NUMBER -->


  <!--
  //====================================================================================================================
  // INSERT/UPDATE/DELETE SQLMAP
  //====================================================================================================================
  -->


</mapper>